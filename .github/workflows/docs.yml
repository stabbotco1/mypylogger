# Optimized Documentation Workflow for mypylogger v0.2.0
#
# This workflow builds and deploys Sphinx documentation to GitHub Pages
# with performance optimizations and comprehensive validation.
#
# Performance Optimizations:
# - Advanced multi-level caching for dependencies and build artifacts
# - Parallel job execution for quality checks and builds
# - Incremental documentation building for unchanged content
# - Optimized Sphinx configuration for faster builds
# - Smart caching strategies with 90%+ hit rate target
# - Target execution time: 3-5 minutes (down from 6-10 minutes)
#
# Requirements Addressed:
# - 9.1: Optimize Sphinx documentation building for faster execution
# - 9.2: Implement incremental documentation building for unchanged content
# - 9.3: Provide comprehensive documentation quality validation
# - 9.4: Optimize GitHub Pages deployment for faster updates
# - 9.5: Implement documentation build caching for improved performance

name: Documentation (Optimized)

# Trigger on pushes to main and pull requests for validation
on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:  # Allow manual triggering

# Global environment variables for performance optimization
env:
  UV_CACHE_DIR: ~/.cache/uv
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  UV_HTTP_TIMEOUT: "60"
  UV_CONCURRENT_DOWNLOADS: "8"
  # Sphinx optimization settings
  SPHINX_PARALLEL_JOBS: "auto"
  SPHINX_CACHE_DIR: ~/.cache/sphinx

# Minimal permissions for security
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

# Global defaults
defaults:
  run:
    shell: bash

jobs:
  # Job 1: Documentation Quality Validation (Optimized)
  documentation-quality:
    name: Documentation Quality Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8  # Reduced from 15 minutes for faster feedback
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive validation
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      # Install UV with retry strategy
      - name: Install UV package manager
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # OPTIMIZED: Advanced multi-level caching for documentation
      - name: Setup advanced documentation caching
        uses: ./.github/actions/advanced-cache-manager
        with:
          cache-type: all
          python-version: "3.12"
          cache-suffix: docs-quality
          enable-cross-job: true
          cache-retention: extended
      
      # Advanced multi-level caching for documentation tools
      - name: Cache documentation-specific tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/sphinx
            ~/.cache/interrogate
            ~/.cache/codespell
          key: docs-tools-${{ runner.os }}-3.12-${{ hashFiles('docs/requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            docs-tools-${{ runner.os }}-3.12-
            docs-tools-${{ runner.os }}-
      
      # Optimized dependency installation with parallel processing
      - name: Install dependencies (optimized)
        run: |
          echo "🚀 Installing dependencies with optimization..."
          uv --version
          
          # Install core dependencies with parallel processing
          uv sync --frozen
          
          # Install documentation dependencies in parallel
          uv pip install -r docs/requirements.txt --concurrent-downloads 8
          
          # Install quality tools efficiently
          uv add --dev interrogate sphinx-lint codespell --concurrent-downloads 8
          
          echo "✅ Dependencies installed successfully"
      
      - name: Verify documentation tools installation
        run: |
          echo "Verifying documentation tools are available..."
          uv run sphinx-build --version
          uv run interrogate --version
          uv run codespell --version
          echo "Documentation tools ready"
      
      # QUALITY CHECK 1: Docstring Coverage Validation (Requirement 16.1)
      - name: Validate docstring coverage (100% requirement)
        id: docstring-coverage
        run: |
          echo "📚 Validating Docstring Coverage (100% Requirement)"
          echo "=================================================="
          
          # Create results directory
          mkdir -p docs-quality-results
          
          # Run docstring coverage validation with strict requirements
          echo "Running interrogate for docstring coverage analysis..."
          if ! uv run interrogate src/ \
            --fail-under=100 \
            --ignore-init-method \
            --ignore-init-module \
            --ignore-magic \
            --ignore-nested-functions \
            --ignore-private \
            --ignore-property-decorators \
            --ignore-semiprivate \
            --exclude=src/mypylogger/__pycache__ \
            --verbose \
            --generate-badge docs-quality-results/docstring-coverage-badge.svg \
            --output docs-quality-results/docstring-coverage-report.txt; then
            
            echo ""
            echo "❌ DOCSTRING COVERAGE FAILED"
            echo "============================"
            echo "Docstring coverage is below the required 100% threshold."
            echo ""
            echo "🔍 Coverage Report:"
            cat docs-quality-results/docstring-coverage-report.txt || echo "Report not available"
            echo ""
            echo "🔧 Fix Commands (run locally):"
            echo "  uv run interrogate src/ --verbose  # See detailed coverage report"
            echo "  # Add missing docstrings to all public functions, classes, and methods"
            echo ""
            echo "📋 Docstring Requirements:"
            echo "- All public functions must have docstrings"
            echo "- All public classes must have docstrings"
            echo "- All public methods must have docstrings"
            echo "- Use Google-style docstring format"
            echo "- Include Args, Returns, and Raises sections where applicable"
            echo ""
            exit 1
          fi
          
          echo "✅ Docstring coverage validation passed (100%)"
          
          # Generate coverage summary for reporting
          COVERAGE_PERCENT=$(uv run interrogate src/ --fail-under=100 --quiet | grep -o '[0-9]*%' | head -1 || echo "100%")
          echo "docstring_coverage=${COVERAGE_PERCENT}" >> $GITHUB_OUTPUT
      
      # QUALITY CHECK 2: Sphinx Documentation Validation
      - name: Validate Sphinx documentation syntax and structure
        id: sphinx-validation
        run: |
          echo "📖 Validating Sphinx Documentation Syntax"
          echo "========================================"
          
          # Test Sphinx configuration
          echo "Testing Sphinx configuration..."
          if ! uv run python -c "import sys; sys.path.insert(0, 'docs/source'); import conf; print('✅ Sphinx configuration is valid')"; then
            echo "❌ Sphinx configuration validation failed"
            exit 1
          fi
          
          # Build documentation with warnings as errors
          echo "Building documentation with strict validation..."
          if ! uv run sphinx-build \
            -b html \
            -W \
            --keep-going \
            -E \
            -a \
            docs/source \
            docs-quality-results/sphinx-build \
            2>&1 | tee docs-quality-results/sphinx-build.log; then
            
            echo ""
            echo "❌ SPHINX DOCUMENTATION BUILD FAILED"
            echo "===================================="
            echo "Documentation contains syntax errors or warnings."
            echo ""
            echo "🔍 Build Errors:"
            cat docs-quality-results/sphinx-build.log || echo "Build log not available"
            echo ""
            echo "🔧 Common Issues and Fixes:"
            echo "- Broken cross-references: Check :ref:, :doc:, :func: links"
            echo "- Missing files: Ensure all referenced files exist"
            echo "- Syntax errors: Check reStructuredText syntax"
            echo "- Autodoc issues: Verify Python imports work correctly"
            echo ""
            echo "💻 Local Testing:"
            echo "  cd docs && uv run sphinx-build -b html source build"
            echo "  # Fix all warnings and errors before committing"
            exit 1
          fi
          
          echo "✅ Sphinx documentation validation passed"
      
      # QUALITY CHECK 3: Link Validation (Requirement 16.2)
      - name: Validate all documentation links
        id: link-validation
        run: |
          echo "🔗 Validating Documentation Links"
          echo "================================"
          
          # Build documentation for link checking
          echo "Building documentation for link validation..."
          uv run sphinx-build -b html docs/source docs-quality-results/linkcheck-build
          
          # Run comprehensive link checking
          echo "Running comprehensive link validation..."
          if ! uv run sphinx-build \
            -b linkcheck \
            -W \
            --keep-going \
            docs/source \
            docs-quality-results/linkcheck \
            2>&1 | tee docs-quality-results/linkcheck.log; then
            
            echo ""
            echo "❌ LINK VALIDATION FAILED"
            echo "========================="
            echo "Documentation contains broken links."
            echo ""
            echo "🔍 Broken Links Report:"
            cat docs-quality-results/linkcheck.log || echo "Link check log not available"
            echo ""
            echo "🔧 Link Fix Guidelines:"
            echo "- Internal links: Check file paths and anchor names"
            echo "- External links: Verify URLs are accessible and current"
            echo "- API references: Ensure all referenced functions exist"
            echo "- Cross-references: Validate :ref: and :doc: targets"
            echo ""
            echo "💻 Local Link Testing:"
            echo "  cd docs && uv run sphinx-build -b linkcheck source build"
            echo "  # Review output/linkcheck/output.txt for detailed results"
            exit 1
          fi
          
          echo "✅ Link validation passed - all links are accessible"
      
      # QUALITY CHECK 4: Spelling and Grammar Check (Requirement 16.3)
      - name: Check spelling and grammar
        id: spelling-grammar
        run: |
          echo "📝 Checking Spelling and Grammar"
          echo "==============================="
          
          # Create custom dictionary for technical terms
          cat > docs-quality-results/custom-dict.txt << EOF
          mypylogger
          JSON
          stdlib
          docstring
          docstrings
          autodoc
          Sphinx
          reStructuredText
          PyPI
          GitHub
          API
          APIs
          CLI
          UUID
          timestamp
          timestamps
          formatter
          formatters
          handler
          handlers
          kwargs
          args
          bool
          str
          int
          dict
          tuple
          EOF
          
          # Run spelling check on documentation files
          echo "Running spelling check on documentation..."
          if ! uv run codespell \
            --dictionary=docs-quality-results/custom-dict.txt \
            --skip="*.pyc,*.git,*/.mypy_cache,*/.pytest_cache,*/.ruff_cache,*/htmlcov,*/build" \
            --ignore-words=docs-quality-results/custom-dict.txt \
            --check-filenames \
            --check-hidden \
            docs/ \
            README.md \
            2>&1 | tee docs-quality-results/spelling-check.log; then
            
            echo ""
            echo "❌ SPELLING CHECK FAILED"
            echo "======================="
            echo "Documentation contains spelling errors."
            echo ""
            echo "🔍 Spelling Errors:"
            cat docs-quality-results/spelling-check.log || echo "Spelling check log not available"
            echo ""
            echo "🔧 Spelling Fix Guidelines:"
            echo "- Review each flagged word carefully"
            echo "- Add technical terms to custom dictionary if legitimate"
            echo "- Fix actual spelling errors in documentation"
            echo "- Consider grammar and readability improvements"
            echo ""
            echo "💻 Local Spelling Check:"
            echo "  uv run codespell docs/ README.md"
            echo "  # Add --write-changes flag to auto-fix simple errors"
            exit 1
          fi
          
          echo "✅ Spelling and grammar check passed"
      
      # QUALITY CHECK 5: Documentation Formatting and Style (Requirement 16.4)
      - name: Check documentation formatting and style consistency
        id: formatting-style
        run: |
          echo "🎨 Checking Documentation Formatting and Style"
          echo "=============================================="
          
          # Check reStructuredText formatting
          echo "Validating reStructuredText formatting..."
          
          # Use sphinx-lint for style checking
          if ! uv run sphinx-lint docs/source/ 2>&1 | tee docs-quality-results/style-check.log; then
            echo ""
            echo "❌ DOCUMENTATION STYLE CHECK FAILED"
            echo "=================================="
            echo "Documentation formatting issues found."
            echo ""
            echo "🔍 Style Issues:"
            cat docs-quality-results/style-check.log || echo "Style check log not available"
            echo ""
            echo "🔧 Style Fix Guidelines:"
            echo "- Consistent heading hierarchy (=, -, ^, \")"
            echo "- Proper indentation for code blocks and lists"
            echo "- Consistent line length (recommended: 80 characters)"
            echo "- Proper use of directives and roles"
            echo ""
            exit 1
          fi
          
          # Check for consistent formatting patterns
          echo "Checking formatting consistency..."
          
          # Verify consistent heading styles
          HEADING_ISSUES=$(find docs/source -name "*.rst" -exec grep -H "^[=\-^\"~]*$" {} \; | \
            awk '{print length($0) " " $0}' | sort -n | \
            awk 'length($2) < 3 {print "Short heading underline: " $0}' || true)
          
          if [ -n "$HEADING_ISSUES" ]; then
            echo ""
            echo "⚠️ Heading formatting issues found:"
            echo "$HEADING_ISSUES"
            echo ""
            echo "🔧 Fix heading underlines to match title length"
          fi
          
          echo "✅ Documentation formatting and style validation passed"
      
      # Generate comprehensive quality report
      - name: Generate documentation quality report
        if: always()
        run: |
          echo "📊 Documentation Quality Report"
          echo "=============================="
          echo "Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          
          echo "🔍 Quality Check Results:"
          echo "========================"
          echo "- Docstring Coverage: ${{ steps.docstring-coverage.outcome }} (${{ steps.docstring-coverage.outputs.docstring_coverage || 'N/A' }})"
          echo "- Sphinx Validation: ${{ steps.sphinx-validation.outcome }}"
          echo "- Link Validation: ${{ steps.link-validation.outcome }}"
          echo "- Spelling/Grammar: ${{ steps.spelling-grammar.outcome }}"
          echo "- Formatting/Style: ${{ steps.formatting-style.outcome }}"
          echo ""
          
          # Determine overall quality status
          if [[ "${{ steps.docstring-coverage.outcome }}" == "success" && \
                "${{ steps.sphinx-validation.outcome }}" == "success" && \
                "${{ steps.link-validation.outcome }}" == "success" && \
                "${{ steps.spelling-grammar.outcome }}" == "success" && \
                "${{ steps.formatting-style.outcome }}" == "success" ]]; then
            echo "✅ OVERALL QUALITY STATUS: PASSED"
            echo "All documentation quality checks passed successfully."
          else
            echo "❌ OVERALL QUALITY STATUS: FAILED"
            echo "One or more documentation quality checks failed."
            echo "Please review the detailed output above and fix all issues."
          fi
      
      # Upload quality check results
      - name: Upload documentation quality results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-quality-results
          path: |
            docs-quality-results/
          retention-days: 30

  # Job 2: Build Documentation (Optimized with Incremental Building)
  build-documentation:
    name: Build Sphinx Documentation (Optimized)
    runs-on: ubuntu-latest
    needs: documentation-quality
    if: needs.documentation-quality.result == 'success'
    timeout-minutes: 6  # Reduced from 10 minutes with optimizations
    outputs:
      build-time: ${{ steps.build-docs.outputs.build-time }}
      cache-hit: ${{ steps.build-docs.outputs.cache-hit }}
      pages-count: ${{ steps.build-docs.outputs.pages-count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      # Install UV with retry strategy
      - name: Install UV package manager
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 3
          retry_on: error
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # OPTIMIZED: Advanced multi-level caching for documentation build
      - name: Setup advanced build caching
        uses: ./.github/actions/advanced-cache-manager
        with:
          cache-type: all
          python-version: "3.12"
          cache-suffix: docs-build
          enable-cross-job: true
          cache-retention: extended
      
      # Advanced caching for build artifacts and Sphinx cache
      - name: Cache build artifacts and Sphinx cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/sphinx
            docs/build/.doctrees
            docs/build/_static
            docs/build/html/.buildinfo
          key: docs-build-artifacts-${{ runner.os }}-3.12-${{ hashFiles('docs/source/**/*.rst', 'src/**/*.py', 'docs/source/conf.py') }}
          restore-keys: |
            docs-build-artifacts-${{ runner.os }}-3.12-
            docs-build-artifacts-${{ runner.os }}-
      
      # Optimized dependency installation
      - name: Install dependencies (fast)
        run: |
          echo "⚡ Fast dependency installation..."
          uv --version
          uv sync --frozen --concurrent-downloads 8
          uv pip install -r docs/requirements.txt --concurrent-downloads 8
          echo "✅ Dependencies ready"
      
      # Use optimized documentation build action
      - name: Build documentation with optimizations
        id: build-docs
        uses: ./.github/actions/optimize-docs-build
        with:
          python-version: "3.12"
          enable-incremental: "true"
          cache-key-suffix: "-build"
      
      # Upload built documentation as artifact
      - name: Upload documentation build
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build
          path: |
            docs/build/html/
          retention-days: 30
      
      # Performance monitoring and build report
      - name: Generate optimized build report
        run: |
          echo "📋 Optimized Documentation Build Report"
          echo "======================================"
          echo "Build completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          
          echo "⚡ Performance Metrics:"
          echo "====================="
          echo "- Build time: ${{ steps.build-docs.outputs.build-time }}s"
          echo "- Cache hit: ${{ steps.build-docs.outputs.cache-hit }}"
          echo "- Pages generated: ${{ steps.build-docs.outputs.pages-count }}"
          echo "- Search enabled: ✅"
          echo "- Mobile responsive: ✅"
          echo "- Incremental build: ✅"
          echo ""
          
          # Performance target validation
          BUILD_TIME=${{ steps.build-docs.outputs.build-time }}
          if [ $BUILD_TIME -le 180 ]; then
            echo "🎯 Performance Target: ✅ EXCELLENT (≤3 minutes)"
          elif [ $BUILD_TIME -le 300 ]; then
            echo "🎯 Performance Target: ✅ GOOD (≤5 minutes)"
          else
            echo "🎯 Performance Target: ⚠️ NEEDS IMPROVEMENT (>5 minutes)"
          fi
          
          echo ""
          echo "🔗 Documentation will be available at:"
          echo "https://username.github.io/mypylogger/"

  # Job 3: Fast GitHub Pages Deployment
  deploy-pages:
    name: Deploy to GitHub Pages (Fast)
    runs-on: ubuntu-latest
    needs: [documentation-quality, build-documentation]
    if: github.ref == 'refs/heads/main' && needs.build-documentation.result == 'success'
    timeout-minutes: 5  # Reduced from 10 minutes for faster deployment
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Download documentation build
        uses: actions/download-artifact@v4
        with:
          name: documentation-build
          path: ./docs-build
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs-build
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Generate deployment report
        run: |
          echo "🚀 GitHub Pages Deployment Report"
          echo "================================="
          echo "Deployment completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Deployment URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          
          echo "✅ Documentation successfully deployed to GitHub Pages"
          echo ""
          echo "🔗 Access your documentation at:"
          echo "${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "📱 Features available:"
          echo "- ✅ Search functionality"
          echo "- ✅ Mobile-responsive design"
          echo "- ✅ API documentation with examples"
          echo "- ✅ User guides and tutorials"
          echo "- ✅ Performance documentation"

  # Job 4: Performance Monitoring and Summary
  documentation-summary:
    name: Performance Monitoring & Summary
    runs-on: ubuntu-latest
    needs: [documentation-quality, build-documentation, deploy-pages]
    if: always()
    timeout-minutes: 3  # Reduced for faster feedback
    
    env:
      WORKFLOW_START_TIME: ${{ github.event.head_commit.timestamp }}
    
    steps:
      - name: Checkout for performance monitoring
        uses: actions/checkout@v4
      
      - name: Monitor documentation performance
        if: needs.build-documentation.result == 'success'
        uses: ./.github/actions/monitor-docs-performance
        with:
          build-time: ${{ needs.build-documentation.outputs.build-time || '0' }}
          cache-hit: ${{ needs.build-documentation.outputs.cache-hit || 'false' }}
          pages-count: ${{ needs.build-documentation.outputs.pages-count || '0' }}
          workflow-start-time: ${{ github.event.head_commit.timestamp }}
      
      - name: Upload performance data
        if: needs.build-documentation.result == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-performance-data
          path: badge-data/
          retention-days: 30
      
      - name: Generate comprehensive documentation report
        run: |
          echo "📚 Documentation Deployment Summary"
          echo "=================================="
          echo "Report generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Triggered by: ${{ github.actor }}"
          echo ""
          
          echo "📊 Job Status Summary:"
          echo "===================="
          echo "- Documentation Quality: ${{ needs.documentation-quality.result }}"
          echo "- Build Documentation: ${{ needs.build-documentation.result }}"
          echo "- Deploy to Pages: ${{ needs.deploy-pages.result }}"
          echo ""
          
          # Determine overall status
          if [[ "${{ needs.documentation-quality.result }}" == "success" && \
                "${{ needs.build-documentation.result }}" == "success" ]]; then
            
            if [[ "${{ needs.deploy-pages.result }}" == "success" ]]; then
              echo "✅ DOCUMENTATION DEPLOYMENT: SUCCESSFUL"
              echo ""
              echo "🎉 Congratulations! Documentation has been successfully:"
              echo "- ✅ Quality validated (100% docstring coverage, links checked)"
              echo "- ✅ Built with Sphinx (HTML, search index, mobile-responsive)"
              echo "- ✅ Deployed to GitHub Pages"
              echo ""
              echo "🔗 Your documentation is now live at:"
              echo "https://username.github.io/mypylogger/"
              echo ""
              echo "📱 Available features:"
              echo "- Full-text search functionality"
              echo "- Mobile-responsive design"
              echo "- API documentation with examples"
              echo "- User guides and tutorials"
              echo "- Installation and quick start guides"
              echo ""
              echo "🔄 Automatic updates:"
              echo "Documentation will automatically update on future pushes to main branch"
              
            elif [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
              echo "✅ DOCUMENTATION VALIDATION: SUCCESSFUL"
              echo ""
              echo "📋 Pull Request Documentation Check:"
              echo "- ✅ Quality validation passed"
              echo "- ✅ Documentation builds successfully"
              echo "- ⏸️ Deployment skipped (not main branch)"
              echo ""
              echo "💡 Next steps:"
              echo "1. Merge this PR to deploy documentation"
              echo "2. Documentation will be automatically deployed to GitHub Pages"
            else
              echo "⚠️ DOCUMENTATION BUILD SUCCESSFUL, DEPLOYMENT FAILED"
              echo ""
              echo "📋 Status:"
              echo "- ✅ Quality validation passed"
              echo "- ✅ Documentation built successfully"
              echo "- ❌ GitHub Pages deployment failed"
              echo ""
              echo "🔧 Troubleshooting:"
              echo "1. Check GitHub Pages settings in repository"
              echo "2. Verify Pages deployment permissions"
              echo "3. Review deployment job logs for specific errors"
            fi
            
          else
            echo "❌ DOCUMENTATION DEPLOYMENT: FAILED"
            echo ""
            echo "📋 Failure Analysis:"
            
            if [[ "${{ needs.documentation-quality.result }}" != "success" ]]; then
              echo "- ❌ Documentation quality validation failed"
              echo "  • Check docstring coverage (must be 100%)"
              echo "  • Fix broken links and references"
              echo "  • Correct spelling and grammar errors"
              echo "  • Resolve formatting and style issues"
            fi
            
            if [[ "${{ needs.build-documentation.result }}" != "success" ]]; then
              echo "- ❌ Documentation build failed"
              echo "  • Check Sphinx configuration (docs/source/conf.py)"
              echo "  • Verify all .rst files have correct syntax"
              echo "  • Ensure all Python imports work correctly"
              echo "  • Review build logs for specific errors"
            fi
            
            echo ""
            echo "🔧 Fix Commands (run locally):"
            echo "# Validate documentation quality"
            echo "uv run interrogate src/ --fail-under=100 --verbose"
            echo "cd docs && uv run sphinx-build -b html source build"
            echo "cd docs && uv run sphinx-build -b linkcheck source build"
            echo "uv run codespell docs/ README.md"
            echo ""
            echo "# Test complete documentation workflow"
            echo "cd docs && uv run sphinx-build -W -b html source build"
            echo ""
            echo "💡 Documentation Requirements:"
            echo "- 100% docstring coverage for all public APIs"
            echo "- All links must be accessible and valid"
            echo "- No spelling or grammar errors"
            echo "- Consistent formatting and style"
            echo "- Valid reStructuredText syntax"
          fi
          
          echo ""
          echo "📈 Optimization Metrics:"
          echo "======================"
          echo "- Quality checks: 5 comprehensive validations"
          echo "- Build formats: HTML + JSON search (optimized)"
          echo "- Caching strategy: Multi-level with 90%+ hit rate target"
          echo "- Incremental builds: ✅ Enabled for faster rebuilds"
          echo "- Parallel processing: ✅ Auto-detected CPU cores"
          echo "- Performance target: 3-5 minutes (down from 6-10 minutes)"
          echo ""
          echo "🚀 Performance Features:"
          echo "======================"
          echo "- Advanced dependency caching"
          echo "- Incremental Sphinx building"
          echo "- Parallel job execution"
          echo "- Optimized GitHub Pages deployment"
          echo "- Smart cache invalidation"
          echo "- Performance monitoring and reporting"