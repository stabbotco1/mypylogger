# Optimized PyPI Publishing Workflow for mypylogger v0.2.0
#
# Streamlined workflow for secure, fast package publishing to PyPI
# with comprehensive pre-publishing validation and enhanced error reporting.
#
# Requirements Addressed:
# - 8.1: Streamlined PyPI publishing workflow for faster execution
# - 8.2: Comprehensive pre-publishing validation
# - 8.3: Clear publishing status reporting and error handling
# - 8.4: Optimized build artifact generation and verification
# - 8.5: Publishing workflow security and compliance

name: Publish to PyPI

# Manual workflow dispatch trigger only
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.2.0)'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run (test build without publishing)'
        required: false
        type: boolean
        default: false

# Optimized environment variables for faster execution
env:
  UV_CACHE_DIR: ~/.cache/uv
  COVERAGE_THRESHOLD: "95"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  UV_HTTP_TIMEOUT: "30"
  UV_CONCURRENT_DOWNLOADS: "16"
  PYTHON_VERSION: "3.12"

# OIDC permissions for secure PyPI publishing (Requirement 4.4)
permissions:
  id-token: write  # Required for OIDC authentication with PyPI
  contents: read   # Required to read repository contents

# Global defaults for consistency
defaults:
  run:
    shell: bash

jobs:
  # Job 1: Streamlined pre-publishing validation (Requirement 8.2)
  pre-publish-validation:
    name: Pre-Publishing Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8  # Reduced from 15 for faster execution
    
    outputs:
      validation-passed: ${{ steps.validation-result.outputs.passed }}
      version: ${{ github.event.inputs.version }}
      dry-run: ${{ github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Streamlined UV installation
      - name: Install UV package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # OPTIMIZED: Advanced multi-level caching for publishing
      - name: Setup advanced publishing caching
        uses: ./.github/actions/advanced-cache-manager
        with:
          cache-type: all
          python-version: ${{ env.PYTHON_VERSION }}
          cache-suffix: publish-validation
          enable-cross-job: true
          cache-retention: standard
      
      # Fast dependency installation
      - name: Install dependencies
        run: |
          uv --version
          uv sync --frozen
      
      # Comprehensive validation with enhanced error reporting
      - name: Run comprehensive quality validation
        run: |
          echo "üöÄ Starting comprehensive pre-publishing validation..."
          echo "===================================================="
          
          # Initialize validation tracking
          VALIDATION_ERRORS=0
          
          # Version format validation
          echo "üè∑Ô∏è  Validating version format..."
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION (expected: X.Y.Z or X.Y.Z-suffix)"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Version format valid: $VERSION"
          fi
          
          # Code formatting check
          echo "üìê Checking code formatting..."
          if ! uv run ruff format --check --diff .; then
            echo "‚ùå Code formatting issues detected"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Code formatting compliant"
          fi
          
          # Linting check
          echo "üîç Running linting checks..."
          if ! uv run ruff check . --output-format=github; then
            echo "‚ùå Linting errors detected"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Linting checks passed"
          fi
          
          # Type checking
          echo "üî¨ Running type checking..."
          if ! uv run mypy src/ --show-error-codes --pretty; then
            echo "‚ùå Type checking errors detected"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Type checking passed"
          fi
          
          # Test suite with coverage
          echo "üß™ Running test suite with coverage..."
          if ! uv run pytest --cov=mypylogger --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} --cov-report=term-missing --tb=short; then
            echo "‚ùå Test suite failed or coverage below threshold"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          else
            echo "‚úÖ Test suite passed with required coverage"
          fi
          
          # Master test script validation (if available)
          if [[ -f "./scripts/run_tests.sh" ]]; then
            echo "üß™ Running master test script..."
            if ! ./scripts/run_tests.sh; then
              echo "‚ùå Master test script failed"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            else
              echo "‚úÖ Master test script passed"
            fi
          fi
          
          # Final validation result
          echo ""
          echo "üìä Validation Summary:"
          echo "====================="
          if [[ $VALIDATION_ERRORS -eq 0 ]]; then
            echo "‚úÖ All validations passed successfully ($VALIDATION_ERRORS errors)"
            echo "Package is ready for building and publishing"
          else
            echo "‚ùå Validation failed with $VALIDATION_ERRORS error(s)"
            echo "Fix all issues before attempting to publish"
            exit 1
          fi
      
      # Set validation result
      - name: Set validation result
        id: validation-result
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Pre-publishing validation completed successfully"

  # Job 2: Optimized build and publish (Requirements 8.1, 8.4, 8.5)
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: pre-publish-validation
    if: needs.pre-publish-validation.outputs.validation-passed == 'true'
    timeout-minutes: 6  # Reduced from 10 for faster execution
    
    environment: 
      name: pypi-publishing
      url: https://pypi.org/project/mypylogger/
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Streamlined UV installation
      - name: Install UV package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # OPTIMIZED: Advanced multi-level caching for build and publish
      - name: Setup advanced build caching
        uses: ./.github/actions/advanced-cache-manager
        with:
          cache-type: all
          python-version: ${{ env.PYTHON_VERSION }}
          cache-suffix: publish-build
          enable-cross-job: true
          cache-retention: standard
      
      # Fast dependency and build tool installation
      - name: Install dependencies and build tools
        run: |
          uv --version
          uv sync --frozen
          uv add --dev build twine
      
      # Optimized package building with enhanced verification (Requirement 8.4)
      - name: Build and verify package
        run: |
          echo "üì¶ Building package for version ${{ needs.pre-publish-validation.outputs.version }}..."
          echo "=============================================================================="
          
          # Clean build artifacts
          rm -rf dist/ build/ *.egg-info/
          
          # Build package
          uv run python -m build --sdist --wheel --outdir dist/
          
          # Verify build artifacts
          echo "üîç Verifying build artifacts..."
          if [[ ! -f dist/*.tar.gz ]] || [[ ! -f dist/*.whl ]]; then
            echo "‚ùå Missing build artifacts"
            exit 1
          fi
          
          # Verify package metadata
          uv run twine check dist/*
          
          echo "‚úÖ Package built and verified successfully"
          ls -la dist/
      
      # Fast installation test for package verification
      - name: Test package installation
        run: |
          echo "üß™ Testing package installation..."
          echo "================================="
          
          # Quick installation test in isolated environment
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/*.whl
          
          # Basic functionality test
          python -c "
          import mypylogger
          logger = mypylogger.get_logger('test')
          logger.info('Installation test successful')
          print('‚úÖ Package installation and basic functionality verified')
          "
          
          deactivate
          rm -rf test_env
      
      # Dry run completion check
      - name: Dry run completion
        if: needs.pre-publish-validation.outputs.dry-run == 'true'
        run: |
          echo "üèÅ DRY RUN COMPLETED SUCCESSFULLY"
          echo "==============================="
          echo "‚úÖ Pre-publishing validation passed"
          echo "‚úÖ Package built and verified"
          echo "‚úÖ Installation test passed"
          echo ""
          echo "üìã Ready for Publishing:"
          echo "- Version: ${{ needs.pre-publish-validation.outputs.version }}"
          echo "- Build artifacts: $(ls dist/)"
          echo ""
          echo "To publish to PyPI, run this workflow again with dry_run=false"
      
      # Secure PyPI publishing with OIDC (Requirement 8.5)
      - name: Publish to PyPI
        if: needs.pre-publish-validation.outputs.dry-run != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          verbose: true
          print-hash: true
      
      # Enhanced publishing success reporting (Requirement 8.3)
      - name: Publishing success report
        if: needs.pre-publish-validation.outputs.dry-run != 'true'
        run: |
          echo "üéâ PUBLISHING COMPLETED SUCCESSFULLY"
          echo "==================================="
          echo "‚úÖ Package: mypylogger v${{ needs.pre-publish-validation.outputs.version }}"
          echo "‚úÖ Published to: https://pypi.org/project/mypylogger/${{ needs.pre-publish-validation.outputs.version }}/"
          echo "‚úÖ Installation: pip install mypylogger==${{ needs.pre-publish-validation.outputs.version }}"
          echo ""
          echo "üìä Publishing Metrics:"
          echo "- Build time: ~$(date -d @$(($(date +%s) - ${{ github.event.head_commit.timestamp }})) -u +%M:%S)"
          echo "- Artifacts: $(ls dist/ | wc -l) files"
          echo "- Package size: $(du -sh dist/ | cut -f1)"
          echo ""
          echo "üîó Quick Links:"
          echo "- PyPI Project: https://pypi.org/project/mypylogger/"
          echo "- Download Stats: https://pypistats.org/packages/mypylogger"
          echo "- Documentation: https://mypylogger.readthedocs.io/"

  # Job 3: Enhanced workflow reporting and error handling (Requirement 8.3)
  publish-summary:
    name: Publishing Summary
    runs-on: ubuntu-latest
    needs: [pre-publish-validation, build-and-publish]
    if: always()  # Run even if previous jobs fail
    timeout-minutes: 2  # Reduced for faster completion
    
    steps:
      - name: Generate comprehensive workflow summary
        run: |
          echo "üìä PyPI Publishing Workflow Summary"
          echo "=================================="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "Workflow: ${{ github.workflow }} #${{ github.run_number }}"
          echo ""
          echo "üìà Job Results:"
          echo "- Validation: ${{ needs.pre-publish-validation.result }}"
          echo "- Build/Publish: ${{ needs.build-and-publish.result }}"
      
      # Enhanced error reporting and actionable guidance (Requirement 8.3)
      - name: Provide detailed status and next steps
        run: |
          echo "üéØ Publishing Status Analysis"
          echo "============================"
          
          VALIDATION_RESULT="${{ needs.pre-publish-validation.result }}"
          BUILD_RESULT="${{ needs.build-and-publish.result }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          VERSION="${{ github.event.inputs.version }}"
          
          # Analyze validation results
          if [[ "$VALIDATION_RESULT" == "success" ]]; then
            echo "‚úÖ Pre-Publishing Validation: PASSED"
            echo "   ‚Üí All quality gates satisfied"
            echo "   ‚Üí Code quality standards met"
            echo "   ‚Üí Test coverage requirements satisfied"
          else
            echo "‚ùå Pre-Publishing Validation: FAILED"
            echo "   ‚Üí Quality checks did not pass"
            echo "   ‚Üí Action required: Fix validation issues"
            echo "   ‚Üí Troubleshooting: Run './scripts/run_tests.sh' locally"
            echo "   ‚Üí Common issues: Test failures, linting errors, type errors"
          fi
          
          echo ""
          
          # Analyze build/publish results
          if [[ "$BUILD_RESULT" == "success" ]]; then
            if [[ "$DRY_RUN" == "true" ]]; then
              echo "‚úÖ Build and Publish (Dry Run): COMPLETED"
              echo "   ‚Üí Package built and verified successfully"
              echo "   ‚Üí Installation test passed"
              echo "   ‚Üí Ready for production publishing"
              echo ""
              echo "üöÄ Next Steps for Production Publishing:"
              echo "   1. Run workflow again with dry_run=false"
              echo "   2. Monitor PyPI for package availability"
              echo "   3. Test installation: pip install mypylogger==$VERSION"
            else
              echo "‚úÖ Build and Publish: COMPLETED"
              echo "   ‚Üí Package successfully published to PyPI"
              echo "   ‚Üí Version $VERSION is now live"
              echo "   ‚Üí Installation: pip install mypylogger==$VERSION"
              echo ""
              echo "üìã Post-Publishing Tasks:"
              echo "   1. Verify package on PyPI: https://pypi.org/project/mypylogger/$VERSION/"
              echo "   2. Test installation in clean environment"
              echo "   3. Update project documentation"
              echo "   4. Create GitHub release tag"
              echo "   5. Announce release to users"
            fi
          elif [[ "$BUILD_RESULT" == "skipped" ]]; then
            echo "‚è≠Ô∏è  Build and Publish: SKIPPED"
            echo "   ‚Üí Validation failed, build was not attempted"
            echo "   ‚Üí Action required: Fix validation issues first"
          else
            echo "‚ùå Build and Publish: FAILED"
            echo "   ‚Üí Package building or publishing failed"
            echo "   ‚Üí Action required: Check job logs for details"
            echo "   ‚Üí Common issues: Build errors, PyPI authentication, duplicate version"
          fi
          
          echo ""
          echo "üèÅ Overall Workflow Result"
          echo "========================="
          
          # Final status determination
          if [[ "$VALIDATION_RESULT" == "success" && "$BUILD_RESULT" == "success" ]]; then
            if [[ "$DRY_RUN" == "true" ]]; then
              echo "‚úÖ DRY RUN SUCCESSFUL - Package ready for publishing"
            else
              echo "‚úÖ PUBLISHING SUCCESSFUL - Package live on PyPI"
            fi
            exit 0
          else
            echo "‚ùå WORKFLOW FAILED - Publishing incomplete"
            echo ""
            echo "üîß Troubleshooting Guide:"
            echo "========================"
            echo "1. Check job logs for specific error messages"
            echo "2. Run quality checks locally: ./scripts/run_tests.sh"
            echo "3. Verify version format: X.Y.Z (e.g., 0.2.0)"
            echo "4. Ensure version doesn't already exist on PyPI"
            echo "5. Check PyPI authentication and permissions"
            echo "6. Verify all required secrets are configured"
            echo ""
            echo "üìû Support Resources:"
            echo "- GitHub Actions logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo "- PyPI Project: https://pypi.org/project/mypylogger/"
            echo "- Workflow file: .github/workflows/publish.yml"
            exit 1
          fi