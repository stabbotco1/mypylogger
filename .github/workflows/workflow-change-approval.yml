# Workflow Change Approval Process
#
# This workflow implements a comprehensive approval process for workflow changes
# that includes validation, impact analysis, and required approvals based on
# the risk level of the changes.
#
# Requirements addressed:
# - 10.5: Add workflow configuration change approval process

name: Workflow Change Approval

on:
  pull_request:
    paths:
      - '.github/workflows/**'
    types: [opened, synchronize, reopened, ready_for_review]
  
  # Manual approval trigger for high-risk changes
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to approve'
        required: true
        type: number
      approval_level:
        description: 'Approval level'
        required: true
        type: choice
        options: ['standard', 'elevated', 'emergency']
      approver_role:
        description: 'Approver role'
        required: true
        type: choice
        options: ['maintainer', 'admin', 'security_team']

env:
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

defaults:
  run:
    shell: bash

jobs:
  # Job 1: Initial Change Assessment
  change-assessment:
    name: Change Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      risk-level: ${{ steps.assess-risk.outputs.risk_level }}
      approval-required: ${{ steps.assess-risk.outputs.approval_required }}
      approval-type: ${{ steps.assess-risk.outputs.approval_type }}
      changed-workflows: ${{ steps.detect-changes.outputs.changed_workflows }}
      impact-score: ${{ steps.assess-risk.outputs.impact_score }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Make scripts executable
        run: |
          chmod +x .github/scripts/workflow-impact-analyzer.py
          chmod +x .github/scripts/workflow-validator.py
      
      # Detect and analyze workflow changes
      - name: Detect workflow changes
        id: detect-changes
        run: |
          echo "🔍 Detecting workflow changes in PR..."
          
          # Get changed workflow files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD .github/workflows/ | grep -E '\.(yml|yaml)$' || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed workflow files:"
            echo "$CHANGED_FILES"
            
            # Convert to JSON array
            CHANGED_JSON=$(echo "$CHANGED_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "changed_workflows=$CHANGED_JSON" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Count changes
            CHANGE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
            echo "change_count=$CHANGE_COUNT" >> $GITHUB_OUTPUT
          else
            echo "No workflow files changed"
            echo "changed_workflows=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "change_count=0" >> $GITHUB_OUTPUT
          fi
      
      # Assess risk level and approval requirements
      - name: Assess change risk and approval requirements
        id: assess-risk
        run: |
          echo "📊 Assessing change risk and approval requirements..."
          
          if [ "${{ steps.detect-changes.outputs.has_changes }}" = "false" ]; then
            echo "No workflow changes - no approval required"
            echo "risk_level=none" >> $GITHUB_OUTPUT
            echo "approval_required=false" >> $GITHUB_OUTPUT
            echo "approval_type=none" >> $GITHUB_OUTPUT
            echo "impact_score=0.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Run impact analysis
          mkdir -p assessment-results
          
          if ! python .github/scripts/workflow-impact-analyzer.py \
            --base "origin/${{ github.base_ref }}" \
            --target "HEAD" \
            --output json > assessment-results/impact-analysis.json; then
            echo "❌ Impact analysis failed - defaulting to high risk"
            echo "risk_level=high" >> $GITHUB_OUTPUT
            echo "approval_required=true" >> $GITHUB_OUTPUT
            echo "approval_type=elevated" >> $GITHUB_OUTPUT
            echo "impact_score=1.0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract risk metrics
          RISK_LEVEL=$(jq -r '.summary.overall_risk' assessment-results/impact-analysis.json)
          IMPACT_SCORE=$(jq -r '.summary.impact_score' assessment-results/impact-analysis.json)
          CHANGED_COUNT=${{ steps.detect-changes.outputs.change_count }}
          
          echo "Risk Level: $RISK_LEVEL"
          echo "Impact Score: $IMPACT_SCORE"
          echo "Changed Files: $CHANGED_COUNT"
          
          # Determine approval requirements based on risk
          APPROVAL_REQUIRED=false
          APPROVAL_TYPE="none"
          
          case "$RISK_LEVEL" in
            "high")
              APPROVAL_REQUIRED=true
              APPROVAL_TYPE="elevated"
              echo "🔴 HIGH RISK: Elevated approval required"
              ;;
            "medium")
              APPROVAL_REQUIRED=true
              APPROVAL_TYPE="standard"
              echo "🟡 MEDIUM RISK: Standard approval required"
              ;;
            "low")
              if [ "$CHANGED_COUNT" -gt 3 ]; then
                APPROVAL_REQUIRED=true
                APPROVAL_TYPE="standard"
                echo "🟢 LOW RISK (many files): Standard approval required"
              else
                APPROVAL_REQUIRED=false
                APPROVAL_TYPE="none"
                echo "🟢 LOW RISK: No approval required"
              fi
              ;;
            *)
              APPROVAL_REQUIRED=true
              APPROVAL_TYPE="elevated"
              echo "❓ UNKNOWN RISK: Elevated approval required (safety)"
              ;;
          esac
          
          # Additional checks for security-sensitive changes
          SECURITY_CHANGES=$(jq -r '.changes.impact_categories.security.score' assessment-results/impact-analysis.json)
          if (( $(echo "$SECURITY_CHANGES > 0.5" | bc -l) )); then
            APPROVAL_REQUIRED=true
            if [ "$APPROVAL_TYPE" = "standard" ] || [ "$APPROVAL_TYPE" = "none" ]; then
              APPROVAL_TYPE="elevated"
            fi
            echo "🔒 Security impact detected - elevating approval requirement"
          fi
          
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "approval_required=$APPROVAL_REQUIRED" >> $GITHUB_OUTPUT
          echo "approval_type=$APPROVAL_TYPE" >> $GITHUB_OUTPUT
          echo "impact_score=$IMPACT_SCORE" >> $GITHUB_OUTPUT
      
      # Upload assessment results
      - name: Upload assessment results
        uses: actions/upload-artifact@v4
        with:
          name: change-assessment-results
          path: assessment-results/
          retention-days: 30

  # Job 2: Validation Gate (runs for all changes)
  validation-gate:
    name: Validation Gate
    runs-on: ubuntu-latest
    needs: change-assessment
    if: needs.change-assessment.outputs.changed-workflows != '[]'
    timeout-minutes: 15
    
    outputs:
      validation-status: ${{ steps.validation-summary.outputs.status }}
      validation-passed: ${{ steps.validation-summary.outputs.passed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install validation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Make validation scripts executable
        run: |
          chmod +x .github/scripts/workflow-validator.py
          chmod +x .github/scripts/workflow-linter.py
      
      # Run comprehensive validation
      - name: Run workflow validation
        id: validation
        run: |
          echo "🔍 Running comprehensive workflow validation..."
          
          mkdir -p validation-results
          
          # Validate syntax and structure
          if ! python .github/scripts/workflow-validator.py --validate-all --output json > validation-results/syntax-validation.json; then
            echo "❌ Syntax validation failed"
            echo "syntax_passed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Syntax validation passed"
            echo "syntax_passed=true" >> $GITHUB_OUTPUT
          fi
          
          # Run linting
          if ! python .github/scripts/workflow-linter.py .github/workflows --output json > validation-results/linting.json; then
            echo "❌ Linting failed"
            echo "linting_passed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Linting passed"
            echo "linting_passed=true" >> $GITHUB_OUTPUT
          fi
      
      # Determine validation status
      - name: Validation summary
        id: validation-summary
        run: |
          SYNTAX_PASSED="${{ steps.validation.outputs.syntax_passed }}"
          LINTING_PASSED="${{ steps.validation.outputs.linting_passed }}"
          
          if [ "$SYNTAX_PASSED" = "true" ] && [ "$LINTING_PASSED" = "true" ]; then
            echo "✅ All validations passed"
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Validation failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "passed=false" >> $GITHUB_OUTPUT
          fi
      
      # Upload validation results
      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-gate-results
          path: validation-results/
          retention-days: 30

  # Job 3: Approval Status Check
  approval-status:
    name: Approval Status Check
    runs-on: ubuntu-latest
    needs: [change-assessment, validation-gate]
    if: needs.change-assessment.outputs.approval-required == 'true'
    timeout-minutes: 5
    
    outputs:
      approval-status: ${{ steps.check-approvals.outputs.status }}
      required-approvers: ${{ steps.check-approvals.outputs.required_approvers }}
      current-approvers: ${{ steps.check-approvals.outputs.current_approvers }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Check current approval status
      - name: Check approval status
        id: check-approvals
        uses: actions/github-script@v7
        with:
          script: |
            const approvalType = '${{ needs.change-assessment.outputs.approval-type }}';
            const riskLevel = '${{ needs.change-assessment.outputs.risk-level }}';
            
            console.log(`Checking approvals for ${approvalType} approval (${riskLevel} risk)`);
            
            // Get PR reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            // Get repository collaborators with admin/maintain permissions
            const collaborators = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
              permission: 'admin'
            });
            
            const adminUsers = collaborators.data.map(c => c.login);
            
            // Define approval requirements
            let requiredApprovers = [];
            let requiredCount = 0;
            
            switch (approvalType) {
              case 'elevated':
                requiredApprovers = adminUsers;
                requiredCount = 2; // Require 2 admin approvals for elevated
                break;
              case 'standard':
                requiredApprovers = adminUsers;
                requiredCount = 1; // Require 1 admin approval for standard
                break;
              default:
                requiredCount = 0;
            }
            
            // Check current approvals
            const approvedReviews = reviews.data.filter(review => 
              review.state === 'APPROVED' && 
              requiredApprovers.includes(review.user.login)
            );
            
            const currentApprovers = [...new Set(approvedReviews.map(r => r.user.login))];
            const approvalCount = currentApprovers.length;
            
            console.log(`Required approvers: ${requiredApprovers.join(', ')}`);
            console.log(`Current approvers: ${currentApprovers.join(', ')}`);
            console.log(`Approval count: ${approvalCount}/${requiredCount}`);
            
            const approvalMet = approvalCount >= requiredCount;
            
            core.setOutput('status', approvalMet ? 'approved' : 'pending');
            core.setOutput('required_approvers', JSON.stringify(requiredApprovers));
            core.setOutput('current_approvers', JSON.stringify(currentApprovers));
            core.setOutput('required_count', requiredCount);
            core.setOutput('current_count', approvalCount);
            
            return {
              approvalMet,
              requiredCount,
              approvalCount,
              currentApprovers,
              requiredApprovers
            };

  # Job 4: Generate Approval Summary
  approval-summary:
    name: Approval Summary
    runs-on: ubuntu-latest
    needs: [change-assessment, validation-gate, approval-status]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Download assessment results
      - name: Download assessment results
        uses: actions/download-artifact@v4
        with:
          name: change-assessment-results
          path: assessment-results/
        continue-on-error: true
      
      # Generate comprehensive approval summary
      - name: Generate approval summary
        id: summary
        run: |
          echo "📊 Generating workflow change approval summary..."
          
          # Collect status from all jobs
          RISK_LEVEL="${{ needs.change-assessment.outputs.risk-level }}"
          APPROVAL_REQUIRED="${{ needs.change-assessment.outputs.approval-required }}"
          APPROVAL_TYPE="${{ needs.change-assessment.outputs.approval-type }}"
          VALIDATION_PASSED="${{ needs.validation-gate.outputs.validation-passed }}"
          APPROVAL_STATUS="${{ needs.approval-status.outputs.approval-status }}"
          
          echo "🔍 Workflow Change Approval Summary"
          echo "=================================="
          echo "Risk Level: $RISK_LEVEL"
          echo "Approval Required: $APPROVAL_REQUIRED"
          echo "Approval Type: $APPROVAL_TYPE"
          echo "Validation Status: $VALIDATION_PASSED"
          echo "Approval Status: $APPROVAL_STATUS"
          echo ""
          
          # Determine overall status
          OVERALL_STATUS="pending"
          
          if [ "$VALIDATION_PASSED" != "true" ]; then
            OVERALL_STATUS="blocked_validation"
            echo "❌ BLOCKED: Validation failures must be resolved"
          elif [ "$APPROVAL_REQUIRED" = "false" ]; then
            OVERALL_STATUS="approved_auto"
            echo "✅ APPROVED: No manual approval required (low risk)"
          elif [ "$APPROVAL_STATUS" = "approved" ]; then
            OVERALL_STATUS="approved_manual"
            echo "✅ APPROVED: Manual approval requirements met"
          else
            OVERALL_STATUS="pending_approval"
            echo "⏳ PENDING: Awaiting required approvals"
          fi
          
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
          # Create detailed summary for PR comment
          cat > approval-summary.md << EOF
          ## 🔍 Workflow Change Approval Status
          
          **Overall Status:** $([ "$OVERALL_STATUS" = "approved_auto" ] && echo "✅ APPROVED (Automatic)" || [ "$OVERALL_STATUS" = "approved_manual" ] && echo "✅ APPROVED (Manual)" || [ "$OVERALL_STATUS" = "blocked_validation" ] && echo "❌ BLOCKED (Validation)" || echo "⏳ PENDING APPROVAL")
          
          ### Change Assessment
          | Metric | Value | Status |
          |--------|-------|--------|
          | Risk Level | $RISK_LEVEL | $([ "$RISK_LEVEL" = "high" ] && echo "🔴" || [ "$RISK_LEVEL" = "medium" ] && echo "🟡" || echo "🟢") |
          | Impact Score | ${{ needs.change-assessment.outputs.impact-score }} | - |
          | Changed Workflows | ${{ needs.change-assessment.outputs.changed-workflows }} | - |
          | Validation | $([ "$VALIDATION_PASSED" = "true" ] && echo "✅ Passed" || echo "❌ Failed") | $([ "$VALIDATION_PASSED" = "true" ] && echo "✅" || echo "❌") |
          
          ### Approval Requirements
          EOF
          
          if [ "$APPROVAL_REQUIRED" = "true" ]; then
            cat >> approval-summary.md << EOF
          - **Approval Type:** $APPROVAL_TYPE
          - **Required Approvers:** ${{ needs.approval-status.outputs.required-approvers }}
          - **Current Approvers:** ${{ needs.approval-status.outputs.current-approvers }}
          - **Status:** $([ "$APPROVAL_STATUS" = "approved" ] && echo "✅ Requirements Met" || echo "⏳ Awaiting Approval")
          
          EOF
          else
            cat >> approval-summary.md << EOF
          - **Approval Required:** No (low risk changes)
          - **Auto-Approval:** Enabled for low-risk workflow changes
          
          EOF
          fi
          
          # Add action items based on status
          case "$OVERALL_STATUS" in
            "blocked_validation")
              cat >> approval-summary.md << EOF
          ### ❌ Action Required
          - **Validation failures must be resolved before approval**
          - Review validation results in the workflow run
          - Fix identified issues in workflow files
          - Push corrected changes to update this PR
          
          EOF
              ;;
            "pending_approval")
              cat >> approval-summary.md << EOF
          ### ⏳ Awaiting Approval
          - **Manual approval required from authorized reviewers**
          - Required approval type: **$APPROVAL_TYPE**
          - Authorized approvers can review and approve this PR
          - Validation has passed - ready for review
          
          EOF
              ;;
            "approved_auto"|"approved_manual")
              cat >> approval-summary.md << EOF
          ### ✅ Ready to Merge
          - All approval requirements have been met
          - Validation has passed successfully
          - Workflow changes are ready for deployment
          
          EOF
              ;;
          esac
          
          cat >> approval-summary.md << EOF
          ---
          *Approval status updated at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
          
          **Need help?** Check the [Workflow Change Approval Guide](../../wiki/Workflow-Change-Approval) for more information.
          EOF
      
      # Update PR with approval status
      - name: Update PR with approval status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('approval-summary.md', 'utf8');
            
            // Find existing approval comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🔍 Workflow Change Approval Status')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
      
      # Set PR status check
      - name: Set approval status check
        uses: actions/github-script@v7
        with:
          script: |
            const overallStatus = '${{ steps.summary.outputs.overall_status }}';
            
            let state, description;
            
            switch (overallStatus) {
              case 'approved_auto':
              case 'approved_manual':
                state = 'success';
                description = 'Workflow changes approved and ready to merge';
                break;
              case 'blocked_validation':
                state = 'failure';
                description = 'Workflow validation failed - changes required';
                break;
              case 'pending_approval':
                state = 'pending';
                description = 'Awaiting required approvals for workflow changes';
                break;
              default:
                state = 'pending';
                description = 'Workflow change approval in progress';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'workflow-change-approval'
            });
      
      # Final approval gate
      - name: Final approval gate
        run: |
          OVERALL_STATUS="${{ steps.summary.outputs.overall_status }}"
          
          case "$OVERALL_STATUS" in
            "approved_auto"|"approved_manual")
              echo "✅ Workflow changes approved - ready to merge"
              exit 0
              ;;
            "blocked_validation")
              echo "❌ Workflow changes blocked - validation failures"
              exit 1
              ;;
            "pending_approval")
              echo "⏳ Workflow changes pending - awaiting approval"
              exit 1
              ;;
            *)
              echo "❓ Unknown approval status - blocking as safety measure"
              exit 1
              ;;
          esac