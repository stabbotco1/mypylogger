#!/bin/bash
#
# Pre-commit hook for GitHub Actions workflow validation
#
# This hook validates workflow files before they are committed to prevent
# deployment of invalid configurations.
#
# Requirements addressed:
# - 10.5: Prevent deployment of invalid workflow configurations
#
# Installation:
#   cp .github/hooks/pre-commit-workflow-validation .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_ROOT=$(git rev-parse --show-toplevel)
WORKFLOWS_DIR="$REPO_ROOT/.github/workflows"
SCRIPTS_DIR="$REPO_ROOT/.github/scripts"
VALIDATION_SCRIPT="$SCRIPTS_DIR/workflow-validator.py"

echo -e "${BLUE}üîç Pre-commit Workflow Validation${NC}"
echo "=================================="

# Check if we have any workflow files staged
STAGED_WORKFLOWS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^\.github/workflows/.*\.(yml|yaml)$' || true)

if [ -z "$STAGED_WORKFLOWS" ]; then
    echo -e "${GREEN}‚úÖ No workflow files staged - skipping validation${NC}"
    exit 0
fi

echo -e "${BLUE}üìã Staged workflow files:${NC}"
echo "$STAGED_WORKFLOWS" | sed 's/^/  - /'
echo ""

# Check if validation script exists
if [ ! -f "$VALIDATION_SCRIPT" ]; then
    echo -e "${RED}‚ùå Validation script not found: $VALIDATION_SCRIPT${NC}"
    echo "Please ensure the workflow validation scripts are available."
    exit 1
fi

# Make validation script executable
chmod +x "$VALIDATION_SCRIPT"

# Check Python availability
if ! command -v python3 >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Python 3 is required for workflow validation${NC}"
    exit 1
fi

# Check required Python packages
echo -e "${BLUE}üîß Checking dependencies...${NC}"
if ! python3 -c "import yaml" 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è PyYAML not found - attempting to install...${NC}"
    if ! pip3 install pyyaml --user --quiet; then
        echo -e "${RED}‚ùå Failed to install PyYAML${NC}"
        echo "Please install PyYAML: pip install pyyaml"
        exit 1
    fi
fi

# Validation function
validate_workflow() {
    local workflow_file="$1"
    local workflow_name=$(basename "$workflow_file")
    
    echo -e "${BLUE}üîç Validating: $workflow_name${NC}"
    
    # Create temporary file for staged content
    local temp_file=$(mktemp)
    git show ":$workflow_file" > "$temp_file"
    
    # Basic YAML syntax check
    if ! python3 -c "import yaml; yaml.safe_load(open('$temp_file'))" 2>/dev/null; then
        echo -e "${RED}‚ùå YAML syntax error in $workflow_name${NC}"
        rm -f "$temp_file"
        return 1
    fi
    
    # Run comprehensive validation on the staged file
    local validation_output
    if ! validation_output=$(python3 "$VALIDATION_SCRIPT" --file "$workflow_name" 2>&1); then
        echo -e "${RED}‚ùå Validation failed for $workflow_name${NC}"
        echo "$validation_output"
        rm -f "$temp_file"
        return 1
    fi
    
    # Check for critical issues in validation output
    if echo "$validation_output" | grep -q "error\|failed\|critical"; then
        echo -e "${RED}‚ùå Critical issues found in $workflow_name${NC}"
        echo "$validation_output"
        rm -f "$temp_file"
        return 1
    fi
    
    rm -f "$temp_file"
    echo -e "${GREEN}‚úÖ $workflow_name validation passed${NC}"
    return 0
}

# Validate each staged workflow
VALIDATION_FAILED=false
FAILED_WORKFLOWS=()

while IFS= read -r workflow_file; do
    if [ -n "$workflow_file" ]; then
        if ! validate_workflow "$workflow_file"; then
            VALIDATION_FAILED=true
            FAILED_WORKFLOWS+=("$workflow_file")
        fi
    fi
done <<< "$STAGED_WORKFLOWS"

echo ""

# Summary and exit
if [ "$VALIDATION_FAILED" = true ]; then
    echo -e "${RED}‚ùå Pre-commit validation FAILED${NC}"
    echo "=================================="
    echo -e "${RED}The following workflow files have validation errors:${NC}"
    for failed_workflow in "${FAILED_WORKFLOWS[@]}"; do
        echo -e "  ${RED}- $failed_workflow${NC}"
    done
    echo ""
    echo -e "${YELLOW}üîß To fix these issues:${NC}"
    echo "1. Review the validation errors above"
    echo "2. Fix the issues in your workflow files"
    echo "3. Stage the corrected files: git add <file>"
    echo "4. Attempt the commit again"
    echo ""
    echo -e "${YELLOW}üí° To skip this validation (NOT RECOMMENDED):${NC}"
    echo "   git commit --no-verify"
    echo ""
    exit 1
else
    echo -e "${GREEN}‚úÖ All workflow validations PASSED${NC}"
    echo "=================================="
    echo -e "${GREEN}üéâ Workflows are ready for commit!${NC}"
    echo ""
    exit 0
fi