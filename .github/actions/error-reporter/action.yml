name: 'Enhanced Error Reporter'
description: 'Reusable action for detailed error analysis and reporting'
inputs:
  error-type:
    description: 'Type of error (test, linting, formatting, type-checking, performance)'
    required: true
  step-name:
    description: 'Name of the failed step'
    required: true
  python-version:
    description: 'Python version being used'
    required: false
    default: '3.12'

runs:
  using: 'composite'
  steps:
    - name: Generate error report
      run: |
        echo "‚ùå ${{ inputs.error-type }} FAILURE ANALYSIS"
        echo "$(printf '=%.0s' {1..50})"
        echo "Failure Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Step: ${{ inputs.step-name }}"
        echo "Python Version: ${{ inputs.python-version }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow Run: ${{ github.run_id }}"
        echo ""
        
        case "${{ inputs.error-type }}" in
          "test")
            echo "üîç Test Failure Analysis:"
            echo "- Check test output above for specific failures"
            echo "- Verify test coverage meets ${{ env.COVERAGE_THRESHOLD || '95' }}% requirement"
            echo "- Look for environment-specific issues"
            echo "- Check for missing test files or imports"
            echo ""
            echo "üîß Local Fix Commands:"
            echo "  uv run pytest -v --tb=short          # Short traceback for quick overview"
            echo "  uv run pytest --lf                   # Run only last failed tests"
            echo "  uv run pytest --cov=mypylogger --cov-report=html  # Generate coverage report"
            echo "  uv run pytest -k 'test_name'         # Run specific test"
            echo ""
            echo "üìä Common Test Issues:"
            echo "- Missing test coverage for new code"
            echo "- Import errors or missing dependencies"
            echo "- Environment-specific test failures"
            echo "- Assertion errors in test logic"
            echo "- Timeout issues in slow tests"
            ;;
          "linting")
            echo "üîç Linting Error Analysis:"
            echo "- Code contains style violations detected by Ruff"
            echo "- Check specific error codes and file locations"
            echo "- Review line-by-line violations above"
            echo ""
            echo "üîß Local Fix Commands:"
            echo "  uv run ruff check .                  # See all linting issues"
            echo "  uv run ruff check --fix .            # Auto-fix issues where possible"
            echo "  uv run ruff check --diff .           # Preview changes before fixing"
            echo "  uv run ruff check --output-format=json  # Machine-readable output"
            echo ""
            echo "üìã Common Linting Issues:"
            echo "- F401: Unused imports"
            echo "- E501: Line too long (>120 characters)"
            echo "- D100-D107: Missing docstrings"
            echo "- F821: Undefined variables"
            echo "- I001: Import order issues"
            echo "- W291: Trailing whitespace"
            ;;
          "formatting")
            echo "üîç Formatting Error Analysis:"
            echo "- Code formatting is inconsistent with project standards"
            echo "- Files need auto-formatting with Ruff"
            echo "- Check diff output above for specific changes needed"
            echo ""
            echo "üîß Local Fix Commands:"
            echo "  uv run ruff format .                 # Auto-format all files"
            echo "  uv run ruff format --check .         # Check formatting without changes"
            echo "  uv run ruff format --diff .          # Preview formatting changes"
            echo "  uv run ruff format file.py           # Format specific file"
            echo ""
            echo "üìä Formatting Standards:"
            echo "- Line length: 100 characters (target), 120 max"
            echo "- Indentation: 4 spaces (no tabs)"
            echo "- String quotes: Consistent style"
            echo "- Import sorting: Automatic organization"
            echo "- Trailing commas: Consistent usage"
            ;;
          "type-checking")
            echo "üîç Type Checking Error Analysis:"
            echo "- Missing or incorrect type hints detected by MyPy"
            echo "- Type incompatibility issues between variables/functions"
            echo "- Check error codes above for specific issues"
            echo ""
            echo "üîß Local Fix Commands:"
            echo "  uv run mypy src/                     # Run type checking"
            echo "  uv run mypy src/ --show-error-codes  # Show error codes for research"
            echo "  uv run mypy src/ --install-types     # Install missing type stubs"
            echo "  uv run mypy src/ --ignore-missing-imports  # Ignore third-party imports"
            echo ""
            echo "üìã Common Type Issues:"
            echo "- Missing type hints on function parameters/returns"
            echo "- Incompatible type assignments (str vs int, etc.)"
            echo "- Missing type stubs for third-party libraries"
            echo "- Optional/None handling issues"
            echo "- Generic type parameter issues"
            echo "- Union type mismatches"
            ;;
          "performance")
            echo "üîç Performance Error Analysis:"
            echo "- Performance thresholds not met in benchmarks"
            echo "- Check benchmark execution logs above"
            echo "- Look for specific slow operations"
            echo ""
            echo "üîß Local Fix Commands:"
            echo "  uv run pytest tests/performance/ --benchmark-verbose  # Detailed benchmarks"
            echo "  uv run pytest tests/performance/ --benchmark-sort=mean  # Sort by mean time"
            echo "  uv run python scripts/validate_performance.py  # Validate thresholds"
            echo ""
            echo "‚ö° Performance Optimization Tips:"
            echo "- Review logger initialization for bottlenecks"
            echo "- Check for unnecessary I/O operations"
            echo "- Optimize JSON serialization performance"
            echo "- Consider caching strategies for repeated operations"
            echo "- Profile code with cProfile for detailed analysis"
            ;;
        esac
        
        echo ""
        echo "üí° General Tips:"
        echo "- Run './scripts/run_tests.sh' for comprehensive validation"
        echo "- Set up pre-commit hooks for automatic checks"
        echo "- Configure IDE with appropriate extensions"
      shell: bash