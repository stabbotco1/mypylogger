name: 'Cache Analytics Dashboard'
description: 'Generate comprehensive cache performance analytics, trends, and optimization insights'
inputs:
  analytics-mode:
    description: 'Analytics mode (collect, analyze, dashboard, trends)'
    required: false
    default: 'dashboard'
  data-retention-days:
    description: 'Number of days to retain analytics data'
    required: false
    default: '30'
  enable-trends:
    description: 'Enable trend analysis and forecasting'
    required: false
    default: 'true'
  generate-badges:
    description: 'Generate performance badges'
    required: false
    default: 'true'

outputs:
  dashboard-url:
    description: 'URL to the generated dashboard'
    value: ${{ steps.dashboard.outputs.url }}
  performance-score:
    description: 'Overall cache performance score (0-100)'
    value: ${{ steps.analytics.outputs.performance-score }}
  trend-direction:
    description: 'Performance trend direction (improving, stable, declining)'
    value: ${{ steps.trends.outputs.direction }}
  recommendations-count:
    description: 'Number of optimization recommendations'
    value: ${{ steps.recommendations.outputs.count }}

runs:
  using: 'composite'
  steps:
    - name: Initialize cache analytics dashboard
      id: init-dashboard
      run: |
        echo "📊 CACHE ANALYTICS DASHBOARD"
        echo "============================"
        echo "Analytics Mode: ${{ inputs.analytics-mode }}"
        echo "Data Retention: ${{ inputs.data-retention-days }} days"
        echo "Trends Enabled: ${{ inputs.enable-trends }}"
        echo "Badge Generation: ${{ inputs.generate-badges }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Create analytics directories
        mkdir -p cache-analytics/{data,trends,dashboards,badges}
        
        # Initialize analytics session
        ANALYTICS_SESSION_ID="analytics-$(date +%s)-${{ github.run_number }}"
        echo "ANALYTICS_SESSION_ID=$ANALYTICS_SESSION_ID" >> $GITHUB_ENV
        
        echo "✅ Cache analytics dashboard initialized"
        echo "📋 Session ID: $ANALYTICS_SESSION_ID"
      shell: bash
    
    - name: Collect comprehensive cache data
      if: inputs.analytics-mode == 'collect' || inputs.analytics-mode == 'analyze' || inputs.analytics-mode == 'dashboard'
      id: collect-analytics
      run: |
        echo "📈 COLLECTING COMPREHENSIVE CACHE DATA"
        echo "====================================="
        
        # Collect current workflow cache data
        echo "🔍 Workflow Cache Analysis:"
        echo "=========================="
        
        # Load performance metrics from various sources
        TOTAL_HIT_RATE=0
        TOTAL_PERFORMANCE_IMPROVEMENT=0
        CACHE_COUNT=0
        
        # Check for existing performance data
        PERF_FILES=(
          ".cache-shared/performance-metrics.json"
          "cache-analytics/performance-analysis.json"
          "cache-analytics/system-data.json"
        )
        
        for perf_file in "${PERF_FILES[@]}"; do
          if [ -f "$perf_file" ]; then
            echo "📊 Found performance data: $perf_file"
            
            # Extract hit rate (basic parsing without jq)
            HIT_RATE=$(grep -o '"cache_hit_rate": [0-9]*' "$perf_file" 2>/dev/null | grep -o '[0-9]*' || echo "0")
            PERF_IMPROVEMENT=$(grep -o '"performance_improvement": [0-9]*' "$perf_file" 2>/dev/null | grep -o '[0-9]*' || echo "0")
            
            if [ "$HIT_RATE" -gt 0 ]; then
              TOTAL_HIT_RATE=$((TOTAL_HIT_RATE + HIT_RATE))
              CACHE_COUNT=$((CACHE_COUNT + 1))
            fi
            
            if [ "$PERF_IMPROVEMENT" -gt 0 ]; then
              TOTAL_PERFORMANCE_IMPROVEMENT=$((TOTAL_PERFORMANCE_IMPROVEMENT + PERF_IMPROVEMENT))
            fi
          fi
        done
        
        # Calculate averages
        if [ $CACHE_COUNT -gt 0 ]; then
          AVG_HIT_RATE=$((TOTAL_HIT_RATE / CACHE_COUNT))
        else
          AVG_HIT_RATE=0
        fi
        
        echo "- Average Hit Rate: ${AVG_HIT_RATE}%"
        echo "- Performance Improvement: ${TOTAL_PERFORMANCE_IMPROVEMENT}%"
        echo "- Data Sources: $CACHE_COUNT"
        
        # Collect system cache statistics
        echo ""
        echo "💾 System Cache Statistics:"
        echo "=========================="
        
        CACHE_DIRS=(
          "$HOME/.cache/uv:UV Dependencies"
          "$HOME/.cache/pip:Pip Packages"
          "$HOME/.mypy_cache:MyPy Cache"
          "$HOME/.ruff_cache:Ruff Cache"
          "$HOME/.pytest_cache:Pytest Cache"
        )
        
        TOTAL_SIZE_MB=0
        CACHE_STATS=""
        
        for cache_entry in "${CACHE_DIRS[@]}"; do
          IFS=':' read -r cache_dir cache_name <<< "$cache_entry"
          
          if [ -d "$cache_dir" ]; then
            SIZE_MB=$(du -sm "$cache_dir" 2>/dev/null | cut -f1 || echo "0")
            FILE_COUNT=$(find "$cache_dir" -type f 2>/dev/null | wc -l || echo "0")
            TOTAL_SIZE_MB=$((TOTAL_SIZE_MB + SIZE_MB))
            
            echo "- $cache_name: ${SIZE_MB}MB (${FILE_COUNT} files)"
            CACHE_STATS="${CACHE_STATS}${cache_name}:${SIZE_MB}MB,"
          else
            echo "- $cache_name: Not found"
          fi
        done
        
        echo "- Total Cache Size: ${TOTAL_SIZE_MB}MB"
        
        # Store collected data
        cat > cache-analytics/data/current-session.json << EOF
        {
          "session_id": "$ANALYTICS_SESSION_ID",
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "run_number": "${{ github.run_number }}",
          "event_type": "${{ github.event_name }}",
          "metrics": {
            "average_hit_rate": $AVG_HIT_RATE,
            "performance_improvement": $TOTAL_PERFORMANCE_IMPROVEMENT,
            "total_cache_size_mb": $TOTAL_SIZE_MB,
            "data_sources": $CACHE_COUNT
          },
          "cache_breakdown": "$CACHE_STATS"
        }
        EOF
        
        # Store for next steps
        echo "AVG_HIT_RATE=$AVG_HIT_RATE" >> $GITHUB_ENV
        echo "TOTAL_PERFORMANCE_IMPROVEMENT=$TOTAL_PERFORMANCE_IMPROVEMENT" >> $GITHUB_ENV
        echo "TOTAL_SIZE_MB=$TOTAL_SIZE_MB" >> $GITHUB_ENV
        
        echo ""
        echo "✅ Comprehensive cache data collected"
      shell: bash
    
    - name: Perform advanced analytics and scoring
      if: inputs.analytics-mode == 'analyze' || inputs.analytics-mode == 'dashboard'
      id: analytics
      run: |
        echo "🧠 ADVANCED CACHE ANALYTICS"
        echo "=========================="
        
        # Load collected data
        AVG_HIT_RATE=${AVG_HIT_RATE:-0}
        TOTAL_PERFORMANCE_IMPROVEMENT=${TOTAL_PERFORMANCE_IMPROVEMENT:-0}
        TOTAL_SIZE_MB=${TOTAL_SIZE_MB:-0}
        
        echo "📊 Performance Analysis:"
        echo "======================"
        echo "- Hit Rate: ${AVG_HIT_RATE}%"
        echo "- Performance Improvement: ${TOTAL_PERFORMANCE_IMPROVEMENT}%"
        echo "- Cache Size: ${TOTAL_SIZE_MB}MB"
        
        # Calculate comprehensive performance score (0-100)
        PERFORMANCE_SCORE=0
        
        # Hit Rate Score (40% weight)
        HIT_RATE_SCORE=0
        if [ $AVG_HIT_RATE -ge 90 ]; then
          HIT_RATE_SCORE=40
        elif [ $AVG_HIT_RATE -ge 80 ]; then
          HIT_RATE_SCORE=35
        elif [ $AVG_HIT_RATE -ge 70 ]; then
          HIT_RATE_SCORE=30
        elif [ $AVG_HIT_RATE -ge 60 ]; then
          HIT_RATE_SCORE=20
        elif [ $AVG_HIT_RATE -ge 50 ]; then
          HIT_RATE_SCORE=10
        fi
        
        # Performance Improvement Score (35% weight)
        PERF_IMPROVEMENT_SCORE=0
        if [ $TOTAL_PERFORMANCE_IMPROVEMENT -ge 50 ]; then
          PERF_IMPROVEMENT_SCORE=35
        elif [ $TOTAL_PERFORMANCE_IMPROVEMENT -ge 40 ]; then
          PERF_IMPROVEMENT_SCORE=30
        elif [ $TOTAL_PERFORMANCE_IMPROVEMENT -ge 30 ]; then
          PERF_IMPROVEMENT_SCORE=25
        elif [ $TOTAL_PERFORMANCE_IMPROVEMENT -ge 20 ]; then
          PERF_IMPROVEMENT_SCORE=15
        elif [ $TOTAL_PERFORMANCE_IMPROVEMENT -ge 10 ]; then
          PERF_IMPROVEMENT_SCORE=10
        fi
        
        # Cache Efficiency Score (25% weight)
        CACHE_EFFICIENCY_SCORE=0
        if [ $TOTAL_SIZE_MB -le 500 ] && [ $AVG_HIT_RATE -ge 80 ]; then
          CACHE_EFFICIENCY_SCORE=25  # Excellent: Small size, high hit rate
        elif [ $TOTAL_SIZE_MB -le 1000 ] && [ $AVG_HIT_RATE -ge 70 ]; then
          CACHE_EFFICIENCY_SCORE=20  # Good: Moderate size, good hit rate
        elif [ $TOTAL_SIZE_MB -le 1500 ] && [ $AVG_HIT_RATE -ge 60 ]; then
          CACHE_EFFICIENCY_SCORE=15  # Fair: Large size, acceptable hit rate
        elif [ $AVG_HIT_RATE -ge 50 ]; then
          CACHE_EFFICIENCY_SCORE=10  # Poor: Any size, low hit rate
        fi
        
        # Calculate total performance score
        PERFORMANCE_SCORE=$((HIT_RATE_SCORE + PERF_IMPROVEMENT_SCORE + CACHE_EFFICIENCY_SCORE))
        
        echo ""
        echo "🎯 Performance Scoring:"
        echo "======================"
        echo "- Hit Rate Score: ${HIT_RATE_SCORE}/40"
        echo "- Performance Score: ${PERF_IMPROVEMENT_SCORE}/35"
        echo "- Efficiency Score: ${CACHE_EFFICIENCY_SCORE}/25"
        echo "- TOTAL SCORE: ${PERFORMANCE_SCORE}/100"
        
        # Performance grade
        PERFORMANCE_GRADE="F"
        if [ $PERFORMANCE_SCORE -ge 90 ]; then
          PERFORMANCE_GRADE="A+"
        elif [ $PERFORMANCE_SCORE -ge 85 ]; then
          PERFORMANCE_GRADE="A"
        elif [ $PERFORMANCE_SCORE -ge 80 ]; then
          PERFORMANCE_GRADE="A-"
        elif [ $PERFORMANCE_SCORE -ge 75 ]; then
          PERFORMANCE_GRADE="B+"
        elif [ $PERFORMANCE_SCORE -ge 70 ]; then
          PERFORMANCE_GRADE="B"
        elif [ $PERFORMANCE_SCORE -ge 65 ]; then
          PERFORMANCE_GRADE="B-"
        elif [ $PERFORMANCE_SCORE -ge 60 ]; then
          PERFORMANCE_GRADE="C+"
        elif [ $PERFORMANCE_SCORE -ge 55 ]; then
          PERFORMANCE_GRADE="C"
        elif [ $PERFORMANCE_SCORE -ge 50 ]; then
          PERFORMANCE_GRADE="C-"
        elif [ $PERFORMANCE_SCORE -ge 40 ]; then
          PERFORMANCE_GRADE="D"
        fi
        
        echo "- Performance Grade: $PERFORMANCE_GRADE"
        
        # Store analytics results
        cat > cache-analytics/data/analytics-results.json << EOF
        {
          "session_id": "$ANALYTICS_SESSION_ID",
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "performance_score": $PERFORMANCE_SCORE,
          "performance_grade": "$PERFORMANCE_GRADE",
          "component_scores": {
            "hit_rate_score": $HIT_RATE_SCORE,
            "performance_improvement_score": $PERF_IMPROVEMENT_SCORE,
            "cache_efficiency_score": $CACHE_EFFICIENCY_SCORE
          },
          "raw_metrics": {
            "hit_rate": $AVG_HIT_RATE,
            "performance_improvement": $TOTAL_PERFORMANCE_IMPROVEMENT,
            "cache_size_mb": $TOTAL_SIZE_MB
          }
        }
        EOF
        
        # Set outputs
        echo "performance-score=${PERFORMANCE_SCORE}" >> $GITHUB_OUTPUT
        echo "PERFORMANCE_SCORE=$PERFORMANCE_SCORE" >> $GITHUB_ENV
        echo "PERFORMANCE_GRADE=$PERFORMANCE_GRADE" >> $GITHUB_ENV
        
        echo ""
        echo "✅ Advanced analytics completed"
      shell: bash
    
    - name: Generate trend analysis
      if: inputs.enable-trends == 'true' && (inputs.analytics-mode == 'trends' || inputs.analytics-mode == 'dashboard')
      id: trends
      run: |
        echo "📈 CACHE PERFORMANCE TREND ANALYSIS"
        echo "==================================="
        
        # Initialize trend analysis
        TREND_DIRECTION="stable"
        TREND_CONFIDENCE="low"
        
        # Look for historical data (simulate with current data for now)
        echo "🔍 Analyzing performance trends..."
        
        PERFORMANCE_SCORE=${PERFORMANCE_SCORE:-0}
        AVG_HIT_RATE=${AVG_HIT_RATE:-0}
        
        # Trend analysis based on current performance
        if [ $PERFORMANCE_SCORE -ge 80 ]; then
          if [ $AVG_HIT_RATE -ge 90 ]; then
            TREND_DIRECTION="excellent"
            TREND_CONFIDENCE="high"
          else
            TREND_DIRECTION="improving"
            TREND_CONFIDENCE="medium"
          fi
        elif [ $PERFORMANCE_SCORE -ge 60 ]; then
          TREND_DIRECTION="stable"
          TREND_CONFIDENCE="medium"
        else
          TREND_DIRECTION="declining"
          TREND_CONFIDENCE="high"
        fi
        
        echo "📊 Trend Analysis Results:"
        echo "========================="
        echo "- Direction: $TREND_DIRECTION"
        echo "- Confidence: $TREND_CONFIDENCE"
        echo "- Current Score: $PERFORMANCE_SCORE"
        
        # Generate trend predictions
        echo ""
        echo "🔮 Performance Predictions:"
        echo "=========================="
        
        case "$TREND_DIRECTION" in
          "excellent")
            echo "🏆 EXCELLENT: Performance is outstanding"
            echo "   → Predicted next score: 90-95"
            echo "   → Recommendation: Maintain current strategies"
            ;;
          "improving")
            echo "📈 IMPROVING: Performance is getting better"
            echo "   → Predicted next score: $((PERFORMANCE_SCORE + 5))-$((PERFORMANCE_SCORE + 10))"
            echo "   → Recommendation: Continue optimization efforts"
            ;;
          "stable")
            echo "➡️ STABLE: Performance is consistent"
            echo "   → Predicted next score: $((PERFORMANCE_SCORE - 2))-$((PERFORMANCE_SCORE + 2))"
            echo "   → Recommendation: Monitor for optimization opportunities"
            ;;
          "declining")
            echo "📉 DECLINING: Performance needs attention"
            echo "   → Predicted next score: $((PERFORMANCE_SCORE - 5))-$((PERFORMANCE_SCORE - 2))"
            echo "   → Recommendation: Implement optimization strategies immediately"
            ;;
        esac
        
        # Store trend analysis
        cat > cache-analytics/trends/trend-analysis.json << EOF
        {
          "session_id": "$ANALYTICS_SESSION_ID",
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "trend_direction": "$TREND_DIRECTION",
          "trend_confidence": "$TREND_CONFIDENCE",
          "current_score": $PERFORMANCE_SCORE,
          "predicted_range": {
            "min": $((PERFORMANCE_SCORE - 5)),
            "max": $((PERFORMANCE_SCORE + 10))
          }
        }
        EOF
        
        # Set outputs
        echo "direction=${TREND_DIRECTION}" >> $GITHUB_OUTPUT
        echo "TREND_DIRECTION=$TREND_DIRECTION" >> $GITHUB_ENV
        
        echo ""
        echo "✅ Trend analysis completed"
      shell: bash
    
    - name: Generate optimization recommendations
      id: recommendations
      run: |
        echo "💡 OPTIMIZATION RECOMMENDATIONS ENGINE"
        echo "====================================="
        
        PERFORMANCE_SCORE=${PERFORMANCE_SCORE:-0}
        AVG_HIT_RATE=${AVG_HIT_RATE:-0}
        TOTAL_SIZE_MB=${TOTAL_SIZE_MB:-0}
        TREND_DIRECTION=${TREND_DIRECTION:-stable}
        
        RECOMMENDATIONS_COUNT=0
        
        echo "🎯 Generating personalized recommendations..."
        echo ""
        
        # Hit rate optimization recommendations
        if [ $AVG_HIT_RATE -lt 90 ]; then
          RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
          echo "📈 RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Improve Cache Hit Rate"
          echo "   Current: ${AVG_HIT_RATE}% | Target: 90%+"
          
          if [ $AVG_HIT_RATE -lt 50 ]; then
            echo "   Priority: CRITICAL"
            echo "   Actions: Review cache key strategies, implement broader restore-keys"
          elif [ $AVG_HIT_RATE -lt 70 ]; then
            echo "   Priority: HIGH"
            echo "   Actions: Optimize cache key specificity, review invalidation patterns"
          else
            echo "   Priority: MEDIUM"
            echo "   Actions: Fine-tune restore-keys, implement cross-job caching"
          fi
          echo ""
        fi
        
        # Performance improvement recommendations
        if [ $TOTAL_PERFORMANCE_IMPROVEMENT -lt 30 ]; then
          RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
          echo "🚀 RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Enhance Performance Improvement"
          echo "   Current: ${TOTAL_PERFORMANCE_IMPROVEMENT}% | Target: 50%+"
          echo "   Priority: HIGH"
          echo "   Actions: Add multi-level caching, implement parallel cache operations"
          echo ""
        fi
        
        # Cache size optimization recommendations
        if [ $TOTAL_SIZE_MB -gt 1000 ]; then
          RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
          echo "💾 RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Optimize Cache Size"
          echo "   Current: ${TOTAL_SIZE_MB}MB | Target: <1000MB"
          echo "   Priority: MEDIUM"
          echo "   Actions: Implement cache cleanup, review retention policies"
          echo ""
        fi
        
        # Trend-based recommendations
        case "$TREND_DIRECTION" in
          "declining")
            RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
            echo "📉 RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Address Performance Decline"
            echo "   Trend: Declining | Action Required: IMMEDIATE"
            echo "   Priority: CRITICAL"
            echo "   Actions: Review recent changes, implement aggressive optimization"
            echo ""
            ;;
          "stable")
            if [ $PERFORMANCE_SCORE -lt 80 ]; then
              RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
              echo "⚡ RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Break Performance Plateau"
              echo "   Trend: Stable but suboptimal | Action Required: PROACTIVE"
              echo "   Priority: MEDIUM"
              echo "   Actions: Experiment with advanced caching strategies"
              echo ""
            fi
            ;;
        esac
        
        # Overall performance recommendations
        if [ $PERFORMANCE_SCORE -lt 60 ]; then
          RECOMMENDATIONS_COUNT=$((RECOMMENDATIONS_COUNT + 1))
          echo "🔧 RECOMMENDATION #${RECOMMENDATIONS_COUNT}: Comprehensive Cache Overhaul"
          echo "   Score: ${PERFORMANCE_SCORE}/100 | Grade: ${PERFORMANCE_GRADE:-F}"
          echo "   Priority: CRITICAL"
          echo "   Actions: Implement all optimization strategies, consider cache redesign"
          echo ""
        fi
        
        # Success case
        if [ $RECOMMENDATIONS_COUNT -eq 0 ]; then
          echo "🎉 EXCELLENT: No optimization recommendations needed!"
          echo "   Your cache performance is outstanding"
          echo "   Continue monitoring to maintain optimal performance"
          echo ""
        fi
        
        # Store recommendations
        cat > cache-analytics/data/recommendations.json << EOF
        {
          "session_id": "$ANALYTICS_SESSION_ID",
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "recommendations_count": $RECOMMENDATIONS_COUNT,
          "performance_score": $PERFORMANCE_SCORE,
          "priority_actions": $([ $RECOMMENDATIONS_COUNT -gt 2 ] && echo "true" || echo "false")
        }
        EOF
        
        # Set outputs
        echo "count=${RECOMMENDATIONS_COUNT}" >> $GITHUB_OUTPUT
        echo "RECOMMENDATIONS_COUNT=$RECOMMENDATIONS_COUNT" >> $GITHUB_ENV
        
        echo "✅ Generated $RECOMMENDATIONS_COUNT optimization recommendations"
      shell: bash
    
    - name: Generate performance badges
      if: inputs.generate-badges == 'true'
      id: badges
      run: |
        echo "🏷️ GENERATING PERFORMANCE BADGES"
        echo "==============================="
        
        PERFORMANCE_SCORE=${PERFORMANCE_SCORE:-0}
        AVG_HIT_RATE=${AVG_HIT_RATE:-0}
        PERFORMANCE_GRADE=${PERFORMANCE_GRADE:-F}
        TREND_DIRECTION=${TREND_DIRECTION:-stable}
        
        mkdir -p badge-data
        
        # Performance Score Badge
        SCORE_COLOR="red"
        if [ $PERFORMANCE_SCORE -ge 90 ]; then
          SCORE_COLOR="brightgreen"
        elif [ $PERFORMANCE_SCORE -ge 80 ]; then
          SCORE_COLOR="green"
        elif [ $PERFORMANCE_SCORE -ge 70 ]; then
          SCORE_COLOR="yellow"
        elif [ $PERFORMANCE_SCORE -ge 60 ]; then
          SCORE_COLOR="orange"
        fi
        
        cat > badge-data/cache-performance-score.json << EOF
        {
          "schemaVersion": 1,
          "label": "cache performance",
          "message": "${PERFORMANCE_SCORE}/100 (${PERFORMANCE_GRADE})",
          "color": "$SCORE_COLOR"
        }
        EOF
        
        # Hit Rate Badge
        HIT_RATE_COLOR="red"
        if [ $AVG_HIT_RATE -ge 90 ]; then
          HIT_RATE_COLOR="brightgreen"
        elif [ $AVG_HIT_RATE -ge 80 ]; then
          HIT_RATE_COLOR="green"
        elif [ $AVG_HIT_RATE -ge 70 ]; then
          HIT_RATE_COLOR="yellow"
        elif [ $AVG_HIT_RATE -ge 60 ]; then
          HIT_RATE_COLOR="orange"
        fi
        
        cat > badge-data/cache-hit-rate.json << EOF
        {
          "schemaVersion": 1,
          "label": "cache hit rate",
          "message": "${AVG_HIT_RATE}%",
          "color": "$HIT_RATE_COLOR"
        }
        EOF
        
        # Trend Badge
        TREND_COLOR="blue"
        TREND_MESSAGE="$TREND_DIRECTION"
        case "$TREND_DIRECTION" in
          "excellent") TREND_COLOR="brightgreen"; TREND_MESSAGE="excellent" ;;
          "improving") TREND_COLOR="green"; TREND_MESSAGE="improving" ;;
          "stable") TREND_COLOR="blue"; TREND_MESSAGE="stable" ;;
          "declining") TREND_COLOR="red"; TREND_MESSAGE="declining" ;;
        esac
        
        cat > badge-data/cache-trend.json << EOF
        {
          "schemaVersion": 1,
          "label": "performance trend",
          "message": "$TREND_MESSAGE",
          "color": "$TREND_COLOR"
        }
        EOF
        
        echo "✅ Generated performance badges:"
        echo "   - Performance Score: ${PERFORMANCE_SCORE}/100 ($SCORE_COLOR)"
        echo "   - Hit Rate: ${AVG_HIT_RATE}% ($HIT_RATE_COLOR)"
        echo "   - Trend: $TREND_MESSAGE ($TREND_COLOR)"
      shell: bash
    
    - name: Create analytics dashboard
      if: inputs.analytics-mode == 'dashboard'
      id: dashboard
      run: |
        echo "📊 CREATING ANALYTICS DASHBOARD"
        echo "=============================="
        
        # Generate comprehensive dashboard HTML
        cat > cache-analytics/dashboards/performance-dashboard.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Cache Performance Dashboard</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 20px; }
                .metric-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .metric-value { font-size: 2em; font-weight: bold; margin-bottom: 5px; }
                .metric-label { color: #666; font-size: 0.9em; }
                .excellent { color: #28a745; }
                .good { color: #17a2b8; }
                .warning { color: #ffc107; }
                .danger { color: #dc3545; }
                .recommendations { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .recommendation { padding: 15px; margin: 10px 0; border-left: 4px solid #007bff; background: #f8f9fa; }
                .critical { border-left-color: #dc3545; }
                .high { border-left-color: #ffc107; }
                .medium { border-left-color: #17a2b8; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🚀 Cache Performance Dashboard</h1>
                    <p>Real-time analytics and optimization insights for GitHub Actions cache performance</p>
                </div>
        EOF
        
        # Add dynamic content based on current metrics
        PERFORMANCE_SCORE=${PERFORMANCE_SCORE:-0}
        AVG_HIT_RATE=${AVG_HIT_RATE:-0}
        TOTAL_SIZE_MB=${TOTAL_SIZE_MB:-0}
        RECOMMENDATIONS_COUNT=${RECOMMENDATIONS_COUNT:-0}
        
        # Determine CSS classes based on performance
        SCORE_CLASS="danger"
        if [ $PERFORMANCE_SCORE -ge 80 ]; then
          SCORE_CLASS="excellent"
        elif [ $PERFORMANCE_SCORE -ge 60 ]; then
          SCORE_CLASS="good"
        elif [ $PERFORMANCE_SCORE -ge 40 ]; then
          SCORE_CLASS="warning"
        fi
        
        HIT_RATE_CLASS="danger"
        if [ $AVG_HIT_RATE -ge 90 ]; then
          HIT_RATE_CLASS="excellent"
        elif [ $AVG_HIT_RATE -ge 70 ]; then
          HIT_RATE_CLASS="good"
        elif [ $AVG_HIT_RATE -ge 50 ]; then
          HIT_RATE_CLASS="warning"
        fi
        
        cat >> cache-analytics/dashboards/performance-dashboard.html << EOF
                <div class="metrics">
                    <div class="metric-card">
                        <div class="metric-value $SCORE_CLASS">${PERFORMANCE_SCORE}/100</div>
                        <div class="metric-label">Performance Score</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value $HIT_RATE_CLASS">${AVG_HIT_RATE}%</div>
                        <div class="metric-label">Cache Hit Rate</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${TOTAL_SIZE_MB}MB</div>
                        <div class="metric-label">Total Cache Size</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${RECOMMENDATIONS_COUNT}</div>
                        <div class="metric-label">Optimization Recommendations</div>
                    </div>
                </div>
                
                <div class="recommendations">
                    <h2>📈 Performance Insights</h2>
                    <div class="recommendation">
                        <strong>Current Status:</strong> Your cache performance score is ${PERFORMANCE_SCORE}/100
                    </div>
                    <div class="recommendation">
                        <strong>Hit Rate Analysis:</strong> ${AVG_HIT_RATE}% cache hit rate $([ $AVG_HIT_RATE -ge 90 ] && echo "(Excellent)" || echo "(Needs Improvement)")
                    </div>
                    <div class="recommendation">
                        <strong>Optimization Opportunities:</strong> ${RECOMMENDATIONS_COUNT} recommendations available
                    </div>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Generate dashboard URL (simulated)
        DASHBOARD_URL="cache-analytics/dashboards/performance-dashboard.html"
        echo "url=${DASHBOARD_URL}" >> $GITHUB_OUTPUT
        
        echo "✅ Analytics dashboard created"
        echo "📊 Dashboard URL: $DASHBOARD_URL"
      shell: bash
    
    - name: Upload analytics data and dashboard
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cache-analytics-dashboard-${{ github.run_number }}
        path: |
          cache-analytics/
          badge-data/
        retention-days: ${{ inputs.data-retention-days }}