name: 'Smart Cache Invalidation'
description: 'Implement intelligent cache invalidation strategies for dependency updates and configuration changes'
inputs:
  invalidation-strategy:
    description: 'Invalidation strategy (auto, manual, selective, aggressive)'
    required: false
    default: 'auto'
  change-detection:
    description: 'Enable automatic change detection'
    required: false
    default: 'true'
  preserve-cross-job:
    description: 'Preserve cross-job caches when possible'
    required: false
    default: 'true'

outputs:
  invalidation-performed:
    description: 'Whether cache invalidation was performed'
    value: ${{ steps.invalidation-result.outputs.performed }}
  invalidated-caches:
    description: 'List of invalidated cache types'
    value: ${{ steps.invalidation-result.outputs.invalidated }}
  preservation-count:
    description: 'Number of caches preserved'
    value: ${{ steps.invalidation-result.outputs.preserved }}

runs:
  using: 'composite'
  steps:
    - name: Initialize smart cache invalidation
      id: init-invalidation
      run: |
        echo "üßπ SMART CACHE INVALIDATION SYSTEM"
        echo "=================================="
        echo "Strategy: ${{ inputs.invalidation-strategy }}"
        echo "Change Detection: ${{ inputs.change-detection }}"
        echo "Preserve Cross-Job: ${{ inputs.preserve-cross-job }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Create invalidation tracking directory
        mkdir -p .cache-invalidation
        
        echo "‚úÖ Smart cache invalidation initialized"
      shell: bash
    
    - name: Detect changes and analyze invalidation needs
      if: inputs.change-detection == 'true'
      id: change-detection
      run: |
        echo "üîç CHANGE DETECTION AND ANALYSIS"
        echo "==============================="
        
        # Initialize change tracking
        DEPS_CHANGED=false
        WORKFLOW_CHANGED=false
        SOURCE_CHANGED=false
        CONFIG_CHANGED=false
        DOCS_ONLY=false
        TESTS_ONLY=false
        
        # Detect changes based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "üìã Analyzing pull request changes..."
          
          # Get changed files (fallback if git commands fail)
          git fetch origin ${{ github.base_ref }} 2>/dev/null || echo "Could not fetch base branch"
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || echo "")
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed files detected:"
            echo "$CHANGED_FILES"
            echo ""
            
            # Analyze dependency changes
            if echo "$CHANGED_FILES" | grep -E "(uv\.lock|pyproject\.toml|requirements.*\.txt)" > /dev/null; then
              DEPS_CHANGED=true
              echo "üì¶ Dependency changes detected"
            fi
            
            # Analyze workflow changes
            if echo "$CHANGED_FILES" | grep -E "\.github/(workflows|actions)" > /dev/null; then
              WORKFLOW_CHANGED=true
              echo "‚öôÔ∏è Workflow changes detected"
            fi
            
            # Analyze source code changes
            if echo "$CHANGED_FILES" | grep -E "src/.*\.py$" > /dev/null; then
              SOURCE_CHANGED=true
              echo "üîç Source code changes detected"
            fi
            
            # Analyze configuration changes
            if echo "$CHANGED_FILES" | grep -E "(pyproject\.toml|setup\.cfg|\.pre-commit-config\.yaml)" > /dev/null; then
              CONFIG_CHANGED=true
              echo "üîß Configuration changes detected"
            fi
            
            # Check for docs-only changes
            TOTAL_CHANGES=$(echo "$CHANGED_FILES" | wc -l)
            DOCS_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^docs/" | wc -l || echo "0")
            if [ "$DOCS_CHANGES" -eq "$TOTAL_CHANGES" ] && [ "$TOTAL_CHANGES" -gt 0 ]; then
              DOCS_ONLY=true
              echo "üìö Documentation-only changes detected"
            fi
            
            # Check for tests-only changes
            TEST_CHANGES=$(echo "$CHANGED_FILES" | grep -E "^tests/" | wc -l || echo "0")
            if [ "$TEST_CHANGES" -eq "$TOTAL_CHANGES" ] && [ "$TOTAL_CHANGES" -gt 0 ]; then
              TESTS_ONLY=true
              echo "üß™ Test-only changes detected"
            fi
            
          else
            echo "‚ö†Ô∏è Could not detect changed files, assuming full invalidation needed"
            DEPS_CHANGED=true
            WORKFLOW_CHANGED=true
            SOURCE_CHANGED=true
            CONFIG_CHANGED=true
          fi
          
        else
          echo "üìã Push to main branch - analyzing recent commits..."
          
          # For push events, check recent commits (last 5)
          RECENT_FILES=$(git diff --name-only HEAD~5..HEAD 2>/dev/null || echo "")
          
          if [ -n "$RECENT_FILES" ]; then
            echo "Recent changes:"
            echo "$RECENT_FILES"
            
            # Apply same analysis logic
            if echo "$RECENT_FILES" | grep -E "(uv\.lock|pyproject\.toml|requirements.*\.txt)" > /dev/null; then
              DEPS_CHANGED=true
            fi
            
            if echo "$RECENT_FILES" | grep -E "\.github/(workflows|actions)" > /dev/null; then
              WORKFLOW_CHANGED=true
            fi
            
            if echo "$RECENT_FILES" | grep -E "src/.*\.py$" > /dev/null; then
              SOURCE_CHANGED=true
            fi
            
            if echo "$RECENT_FILES" | grep -E "(pyproject\.toml|setup\.cfg|\.pre-commit-config\.yaml)" > /dev/null; then
              CONFIG_CHANGED=true
            fi
          fi
        fi
        
        # Store change detection results
        cat > .cache-invalidation/change-analysis.json << EOF
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "event_type": "${{ github.event_name }}",
          "changes": {
            "dependencies": $DEPS_CHANGED,
            "workflows": $WORKFLOW_CHANGED,
            "source_code": $SOURCE_CHANGED,
            "configuration": $CONFIG_CHANGED,
            "docs_only": $DOCS_ONLY,
            "tests_only": $TESTS_ONLY
          }
        }
        EOF
        
        # Set environment variables for next steps
        echo "DEPS_CHANGED=$DEPS_CHANGED" >> $GITHUB_ENV
        echo "WORKFLOW_CHANGED=$WORKFLOW_CHANGED" >> $GITHUB_ENV
        echo "SOURCE_CHANGED=$SOURCE_CHANGED" >> $GITHUB_ENV
        echo "CONFIG_CHANGED=$CONFIG_CHANGED" >> $GITHUB_ENV
        echo "DOCS_ONLY=$DOCS_ONLY" >> $GITHUB_ENV
        echo "TESTS_ONLY=$TESTS_ONLY" >> $GITHUB_ENV
        
        echo ""
        echo "üìä Change Analysis Summary:"
        echo "=========================="
        echo "- Dependencies: $DEPS_CHANGED"
        echo "- Workflows: $WORKFLOW_CHANGED"
        echo "- Source Code: $SOURCE_CHANGED"
        echo "- Configuration: $CONFIG_CHANGED"
        echo "- Docs Only: $DOCS_ONLY"
        echo "- Tests Only: $TESTS_ONLY"
        
        echo "‚úÖ Change detection completed"
      shell: bash
    
    - name: Determine invalidation strategy
      id: strategy-determination
      run: |
        echo "üéØ INVALIDATION STRATEGY DETERMINATION"
        echo "====================================="
        
        # Load change analysis if available
        DEPS_CHANGED=${DEPS_CHANGED:-false}
        WORKFLOW_CHANGED=${WORKFLOW_CHANGED:-false}
        SOURCE_CHANGED=${SOURCE_CHANGED:-false}
        CONFIG_CHANGED=${CONFIG_CHANGED:-false}
        DOCS_ONLY=${DOCS_ONLY:-false}
        TESTS_ONLY=${TESTS_ONLY:-false}
        
        # Determine what needs to be invalidated
        INVALIDATE_DEPS=false
        INVALIDATE_TOOLS=false
        INVALIDATE_CROSS_JOB=false
        INVALIDATE_WORKFLOW=false
        
        echo "üîç Analyzing invalidation requirements..."
        
        case "${{ inputs.invalidation-strategy }}" in
          "auto")
            echo "üìã Automatic invalidation strategy:"
            
            # Smart invalidation based on changes
            if [ "$DEPS_CHANGED" = "true" ]; then
              INVALIDATE_DEPS=true
              echo "   ‚Üí Dependencies: INVALIDATE (dependency files changed)"
            fi
            
            if [ "$WORKFLOW_CHANGED" = "true" ] || [ "$CONFIG_CHANGED" = "true" ]; then
              INVALIDATE_TOOLS=true
              echo "   ‚Üí Build Tools: INVALIDATE (workflow/config changed)"
            fi
            
            if [ "$SOURCE_CHANGED" = "true" ]; then
              INVALIDATE_WORKFLOW=true
              echo "   ‚Üí Workflow Artifacts: INVALIDATE (source code changed)"
            fi
            
            # Preserve caches for docs-only or tests-only changes
            if [ "$DOCS_ONLY" = "true" ]; then
              INVALIDATE_DEPS=false
              INVALIDATE_TOOLS=false
              echo "   ‚Üí Preservation: ENABLED (docs-only changes)"
            fi
            
            if [ "$TESTS_ONLY" = "true" ]; then
              INVALIDATE_DEPS=false
              echo "   ‚Üí Preservation: PARTIAL (tests-only changes)"
            fi
            ;;
            
          "selective")
            echo "üìã Selective invalidation strategy:"
            
            # Only invalidate what absolutely needs to be invalidated
            if [ "$DEPS_CHANGED" = "true" ]; then
              INVALIDATE_DEPS=true
              echo "   ‚Üí Dependencies: INVALIDATE (required)"
            fi
            
            if [ "$WORKFLOW_CHANGED" = "true" ]; then
              INVALIDATE_TOOLS=true
              echo "   ‚Üí Build Tools: INVALIDATE (required)"
            fi
            ;;
            
          "aggressive")
            echo "üìã Aggressive invalidation strategy:"
            
            # Invalidate everything for maximum freshness
            INVALIDATE_DEPS=true
            INVALIDATE_TOOLS=true
            INVALIDATE_CROSS_JOB=true
            INVALIDATE_WORKFLOW=true
            echo "   ‚Üí All Caches: INVALIDATE (aggressive mode)"
            ;;
            
          "manual")
            echo "üìã Manual invalidation strategy:"
            echo "   ‚Üí No automatic invalidation performed"
            echo "   ‚Üí Manual cache management required"
            ;;
        esac
        
        # Cross-job cache handling
        if [ "${{ inputs.preserve-cross-job }}" = "true" ] && [ "${{ inputs.invalidation-strategy }}" != "aggressive" ]; then
          INVALIDATE_CROSS_JOB=false
          echo "   ‚Üí Cross-Job Caches: PRESERVE (preservation enabled)"
        fi
        
        # Store invalidation decisions
        echo "INVALIDATE_DEPS=$INVALIDATE_DEPS" >> $GITHUB_ENV
        echo "INVALIDATE_TOOLS=$INVALIDATE_TOOLS" >> $GITHUB_ENV
        echo "INVALIDATE_CROSS_JOB=$INVALIDATE_CROSS_JOB" >> $GITHUB_ENV
        echo "INVALIDATE_WORKFLOW=$INVALIDATE_WORKFLOW" >> $GITHUB_ENV
        
        echo ""
        echo "üìä Invalidation Plan:"
        echo "===================="
        echo "- Dependencies Cache: $([ "$INVALIDATE_DEPS" = "true" ] && echo "INVALIDATE" || echo "PRESERVE")"
        echo "- Build Tools Cache: $([ "$INVALIDATE_TOOLS" = "true" ] && echo "INVALIDATE" || echo "PRESERVE")"
        echo "- Cross-Job Cache: $([ "$INVALIDATE_CROSS_JOB" = "true" ] && echo "INVALIDATE" || echo "PRESERVE")"
        echo "- Workflow Cache: $([ "$INVALIDATE_WORKFLOW" = "true" ] && echo "INVALIDATE" || echo "PRESERVE")"
        
        echo "‚úÖ Invalidation strategy determined"
      shell: bash
    
    - name: Execute smart cache invalidation
      id: execute-invalidation
      run: |
        echo "üöÄ EXECUTING SMART CACHE INVALIDATION"
        echo "===================================="
        
        # Load invalidation decisions
        INVALIDATE_DEPS=${INVALIDATE_DEPS:-false}
        INVALIDATE_TOOLS=${INVALIDATE_TOOLS:-false}
        INVALIDATE_CROSS_JOB=${INVALIDATE_CROSS_JOB:-false}
        INVALIDATE_WORKFLOW=${INVALIDATE_WORKFLOW:-false}
        
        INVALIDATED_CACHES=""
        PRESERVED_COUNT=0
        INVALIDATION_PERFORMED=false
        
        echo "üîÑ Processing cache invalidation..."
        
        # Dependencies cache invalidation
        if [ "$INVALIDATE_DEPS" = "true" ]; then
          echo "   ‚Üí Invalidating dependencies cache..."
          # Create invalidation marker for dependencies
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .cache-invalidation/deps-invalidated.marker
          INVALIDATED_CACHES="${INVALIDATED_CACHES}dependencies,"
          INVALIDATION_PERFORMED=true
        else
          echo "   ‚Üí Preserving dependencies cache"
          PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
        fi
        
        # Build tools cache invalidation
        if [ "$INVALIDATE_TOOLS" = "true" ]; then
          echo "   ‚Üí Invalidating build tools cache..."
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .cache-invalidation/tools-invalidated.marker
          INVALIDATED_CACHES="${INVALIDATED_CACHES}build-tools,"
          INVALIDATION_PERFORMED=true
        else
          echo "   ‚Üí Preserving build tools cache"
          PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
        fi
        
        # Cross-job cache invalidation
        if [ "$INVALIDATE_CROSS_JOB" = "true" ]; then
          echo "   ‚Üí Invalidating cross-job cache..."
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .cache-invalidation/cross-job-invalidated.marker
          INVALIDATED_CACHES="${INVALIDATED_CACHES}cross-job,"
          INVALIDATION_PERFORMED=true
        else
          echo "   ‚Üí Preserving cross-job cache"
          PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
        fi
        
        # Workflow cache invalidation
        if [ "$INVALIDATE_WORKFLOW" = "true" ]; then
          echo "   ‚Üí Invalidating workflow cache..."
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" > .cache-invalidation/workflow-invalidated.marker
          INVALIDATED_CACHES="${INVALIDATED_CACHES}workflow,"
          INVALIDATION_PERFORMED=true
        else
          echo "   ‚Üí Preserving workflow cache"
          PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
        fi
        
        # Remove trailing comma
        INVALIDATED_CACHES=$(echo "$INVALIDATED_CACHES" | sed 's/,$//')
        
        # Generate invalidation report
        cat > .cache-invalidation/invalidation-report.json << EOF
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "strategy": "${{ inputs.invalidation-strategy }}",
          "performed": $INVALIDATION_PERFORMED,
          "invalidated_caches": "$INVALIDATED_CACHES",
          "preserved_count": $PRESERVED_COUNT,
          "github_run_id": "${{ github.run_id }}",
          "github_sha": "${{ github.sha }}"
        }
        EOF
        
        echo ""
        echo "üìä Invalidation Results:"
        echo "======================="
        echo "- Invalidation Performed: $INVALIDATION_PERFORMED"
        echo "- Invalidated Caches: ${INVALIDATED_CACHES:-none}"
        echo "- Preserved Caches: $PRESERVED_COUNT"
        
        if [ "$INVALIDATION_PERFORMED" = "true" ]; then
          echo ""
          echo "‚úÖ Cache invalidation completed successfully"
          echo "üîÑ Affected caches will be rebuilt on next access"
          echo "üìà This ensures optimal performance with latest changes"
        else
          echo ""
          echo "‚úÖ No cache invalidation needed"
          echo "üöÄ All caches preserved for maximum performance"
        fi
        
        # Store results for output
        echo "INVALIDATION_PERFORMED=$INVALIDATION_PERFORMED" >> $GITHUB_ENV
        echo "INVALIDATED_CACHES=$INVALIDATED_CACHES" >> $GITHUB_ENV
        echo "PRESERVED_COUNT=$PRESERVED_COUNT" >> $GITHUB_ENV
      shell: bash
    
    - name: Generate cache invalidation recommendations
      run: |
        echo "üí° CACHE INVALIDATION RECOMMENDATIONS"
        echo "===================================="
        
        # Load results
        INVALIDATION_PERFORMED=${INVALIDATION_PERFORMED:-false}
        INVALIDATED_CACHES=${INVALIDATED_CACHES:-none}
        PRESERVED_COUNT=${PRESERVED_COUNT:-0}
        
        echo "üìã Current Session Results:"
        echo "=========================="
        echo "- Strategy Used: ${{ inputs.invalidation-strategy }}"
        echo "- Invalidation Performed: $INVALIDATION_PERFORMED"
        echo "- Caches Invalidated: ${INVALIDATED_CACHES}"
        echo "- Caches Preserved: $PRESERVED_COUNT"
        echo ""
        
        echo "üéØ Optimization Recommendations:"
        echo "==============================="
        
        if [ "$INVALIDATION_PERFORMED" = "false" ]; then
          echo "üöÄ EXCELLENT: No cache invalidation needed"
          echo "   ‚Üí Maximum performance achieved through cache preservation"
          echo "   ‚Üí Continue current development practices"
          echo "   ‚Üí Monitor cache hit rates for optimal performance"
        else
          echo "üîÑ Cache invalidation was necessary due to changes"
          
          if [[ "$INVALIDATED_CACHES" == *"dependencies"* ]]; then
            echo "   ‚Üí Dependencies invalidated: Consider dependency stability"
            echo "   ‚Üí Tip: Pin dependency versions to reduce cache misses"
          fi
          
          if [[ "$INVALIDATED_CACHES" == *"build-tools"* ]]; then
            echo "   ‚Üí Build tools invalidated: Configuration changes detected"
            echo "   ‚Üí Tip: Batch configuration changes to minimize invalidation"
          fi
          
          if [[ "$INVALIDATED_CACHES" == *"workflow"* ]]; then
            echo "   ‚Üí Workflow cache invalidated: Source code changes"
            echo "   ‚Üí Tip: This is normal for active development"
          fi
        fi
        
        echo ""
        echo "üìà Performance Impact:"
        echo "===================="
        
        if [ "$PRESERVED_COUNT" -gt 2 ]; then
          echo "‚úÖ HIGH PERFORMANCE: Most caches preserved ($PRESERVED_COUNT)"
          echo "   ‚Üí Expected performance improvement: 60-80%"
        elif [ "$PRESERVED_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è MODERATE PERFORMANCE: Some caches preserved ($PRESERVED_COUNT)"
          echo "   ‚Üí Expected performance improvement: 30-60%"
        else
          echo "üîÑ REBUILDING: All caches invalidated"
          echo "   ‚Üí Expected performance: Baseline (no cache benefit this run)"
          echo "   ‚Üí Next run will benefit from fresh caches"
        fi
        
        echo ""
        echo "üîÆ Future Optimization Tips:"
        echo "=========================="
        echo "- Use 'selective' strategy for minimal invalidation"
        echo "- Group related changes to reduce invalidation frequency"
        echo "- Monitor cache hit rates to optimize invalidation thresholds"
        echo "- Consider 'preserve-cross-job' for better cross-job performance"
        
        echo "‚úÖ Cache invalidation recommendations generated"
      shell: bash
    
    - name: Set invalidation outputs
      id: invalidation-result
      run: |
        # Set outputs for monitoring and reporting
        echo "performed=${INVALIDATION_PERFORMED:-false}" >> $GITHUB_OUTPUT
        echo "invalidated=${INVALIDATED_CACHES:-none}" >> $GITHUB_OUTPUT
        echo "preserved=${PRESERVED_COUNT:-0}" >> $GITHUB_OUTPUT
        
        echo "üìä Invalidation outputs set for monitoring"
      shell: bash