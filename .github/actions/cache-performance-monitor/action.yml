name: 'Cache Performance Monitor'
description: 'Monitor and optimize cache performance with analytics, hit rate tracking, and intelligent cache management'
inputs:
  monitoring-mode:
    description: 'Monitoring mode (collect, analyze, report, optimize)'
    required: false
    default: 'collect'
  cache-data-path:
    description: 'Path to cache performance data'
    required: false
    default: '.cache-shared/performance-metrics.json'
  enable-analytics:
    description: 'Enable detailed cache analytics'
    required: false
    default: 'true'
  optimization-threshold:
    description: 'Cache hit rate threshold for optimization recommendations'
    required: false
    default: '90'

outputs:
  cache-hit-rate:
    description: 'Current cache hit rate percentage'
    value: ${{ steps.analytics.outputs.hit-rate }}
  optimization-score:
    description: 'Cache optimization score (0-100)'
    value: ${{ steps.analytics.outputs.optimization-score }}
  recommendations:
    description: 'Cache optimization recommendations'
    value: ${{ steps.analytics.outputs.recommendations }}
  performance-trend:
    description: 'Performance trend (improving, stable, declining)'
    value: ${{ steps.analytics.outputs.trend }}

runs:
  using: 'composite'
  steps:
    - name: Initialize cache performance monitoring
      id: init-monitoring
      run: |
        echo "📊 CACHE PERFORMANCE MONITORING SYSTEM"
        echo "======================================"
        echo "Monitoring Mode: ${{ inputs.monitoring-mode }}"
        echo "Analytics Enabled: ${{ inputs.enable-analytics }}"
        echo "Optimization Threshold: ${{ inputs.optimization-threshold }}%"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Create monitoring directories
        mkdir -p .cache-shared .workflow-cache cache-analytics
        
        # Initialize performance tracking
        MONITORING_START_TIME=$(date +%s)
        echo "MONITORING_START_TIME=${MONITORING_START_TIME}" >> $GITHUB_ENV
        
        echo "✅ Cache performance monitoring initialized"
      shell: bash
    
    - name: Collect cache performance data
      if: inputs.monitoring-mode == 'collect' || inputs.monitoring-mode == 'analyze' || inputs.monitoring-mode == 'report'
      id: collect-data
      run: |
        echo "📈 COLLECTING CACHE PERFORMANCE DATA"
        echo "==================================="
        
        # Collect system cache information
        echo "🔍 System Cache Analysis:"
        echo "========================"
        
        # Check cache directory sizes
        CACHE_DIRS=(
          "$HOME/.cache/uv"
          "$HOME/.cache/pip"
          "$HOME/.mypy_cache"
          "$HOME/.ruff_cache"
          "$HOME/.pytest_cache"
        )
        
        TOTAL_CACHE_SIZE=0
        
        for cache_dir in "${CACHE_DIRS[@]}"; do
          if [ -d "$cache_dir" ]; then
            SIZE=$(du -sm "$cache_dir" 2>/dev/null | cut -f1 || echo "0")
            TOTAL_CACHE_SIZE=$((TOTAL_CACHE_SIZE + SIZE))
            echo "- $(basename "$cache_dir"): ${SIZE}MB"
          else
            echo "- $(basename "$cache_dir"): Not found"
          fi
        done
        
        echo "- Total Cache Size: ${TOTAL_CACHE_SIZE}MB"
        echo ""
        
        # Collect workflow timing data
        echo "⏱️ Workflow Timing Analysis:"
        echo "============================"
        
        CURRENT_TIME=$(date +%s)
        if [ -n "${MONITORING_START_TIME}" ]; then
          MONITORING_DURATION=$((CURRENT_TIME - MONITORING_START_TIME))
          echo "- Monitoring Duration: ${MONITORING_DURATION}s"
        fi
        
        if [ -n "${OPTIMIZATION_START_TIME}" ]; then
          OPTIMIZATION_DURATION=$((CURRENT_TIME - OPTIMIZATION_START_TIME))
          echo "- Since Optimization: ${OPTIMIZATION_DURATION}s"
        fi
        
        # Store collected data
        cat > cache-analytics/system-data.json << EOF
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "total_cache_size_mb": $TOTAL_CACHE_SIZE,
          "monitoring_duration_s": ${MONITORING_DURATION:-0},
          "optimization_duration_s": ${OPTIMIZATION_DURATION:-0},
          "runner_os": "${{ runner.os }}",
          "github_run_id": "${{ github.run_id }}",
          "github_run_number": "${{ github.run_number }}"
        }
        EOF
        
        echo "✅ System performance data collected"
      shell: bash
    
    - name: Analyze cache performance and generate insights
      if: inputs.enable-analytics == 'true' && (inputs.monitoring-mode == 'analyze' || inputs.monitoring-mode == 'report')
      id: analytics
      run: |
        echo "🧠 CACHE PERFORMANCE ANALYTICS"
        echo "=============================="
        
        # Load performance metrics if available
        HIT_RATE=0
        PERFORMANCE_IMPROVEMENT=0
        
        if [ -f "${{ inputs.cache-data-path }}" ]; then
          echo "📊 Loading cache performance metrics..."
          
          # Extract metrics using basic shell commands (no jq dependency)
          HIT_RATE=$(grep -o '"cache_hit_rate": [0-9]*' "${{ inputs.cache-data-path }}" | grep -o '[0-9]*' || echo "0")
          PERFORMANCE_IMPROVEMENT=$(grep -o '"performance_improvement": [0-9]*' "${{ inputs.cache-data-path }}" | grep -o '[0-9]*' || echo "0")
          
          echo "- Current Hit Rate: ${HIT_RATE}%"
          echo "- Performance Improvement: ${PERFORMANCE_IMPROVEMENT}%"
        else
          echo "⚠️ No cache performance data found, using defaults"
        fi
        
        # Calculate optimization score (0-100)
        OPTIMIZATION_SCORE=0
        
        # Hit rate contributes 60% to optimization score
        HIT_RATE_SCORE=$((HIT_RATE * 60 / 100))
        OPTIMIZATION_SCORE=$((OPTIMIZATION_SCORE + HIT_RATE_SCORE))
        
        # Performance improvement contributes 30% to optimization score
        PERF_SCORE=$((PERFORMANCE_IMPROVEMENT * 30 / 100))
        if [ $PERF_SCORE -gt 30 ]; then
          PERF_SCORE=30  # Cap at 30%
        fi
        OPTIMIZATION_SCORE=$((OPTIMIZATION_SCORE + PERF_SCORE))
        
        # Cache size efficiency contributes 10% to optimization score
        if [ -f "cache-analytics/system-data.json" ]; then
          CACHE_SIZE=$(grep -o '"total_cache_size_mb": [0-9]*' cache-analytics/system-data.json | grep -o '[0-9]*' || echo "0")
          if [ $CACHE_SIZE -lt 500 ]; then
            SIZE_SCORE=10  # Efficient cache size
          elif [ $CACHE_SIZE -lt 1000 ]; then
            SIZE_SCORE=5   # Moderate cache size
          else
            SIZE_SCORE=0   # Large cache size
          fi
          OPTIMIZATION_SCORE=$((OPTIMIZATION_SCORE + SIZE_SCORE))
        fi
        
        echo ""
        echo "📈 Performance Analytics Results:"
        echo "==============================="
        echo "- Hit Rate: ${HIT_RATE}%"
        echo "- Performance Improvement: ${PERFORMANCE_IMPROVEMENT}%"
        echo "- Optimization Score: ${OPTIMIZATION_SCORE}/100"
        
        # Generate performance trend analysis
        TREND="stable"
        if [ $HIT_RATE -ge ${{ inputs.optimization-threshold }} ]; then
          if [ $PERFORMANCE_IMPROVEMENT -ge 50 ]; then
            TREND="excellent"
          else
            TREND="improving"
          fi
        elif [ $HIT_RATE -lt 50 ]; then
          TREND="declining"
        fi
        
        echo "- Performance Trend: ${TREND}"
        echo ""
        
        # Generate optimization recommendations
        echo "🎯 OPTIMIZATION RECOMMENDATIONS"
        echo "=============================="
        
        RECOMMENDATIONS=""
        
        if [ $HIT_RATE -lt ${{ inputs.optimization-threshold }} ]; then
          echo "❌ Cache hit rate (${HIT_RATE}%) below target (${{ inputs.optimization-threshold }}%)"
          RECOMMENDATIONS="${RECOMMENDATIONS}improve-hit-rate,"
          
          if [ $HIT_RATE -lt 50 ]; then
            echo "   → CRITICAL: Review cache key strategies"
            echo "   → Consider broader restore-keys patterns"
            RECOMMENDATIONS="${RECOMMENDATIONS}review-cache-keys,"
          elif [ $HIT_RATE -lt 70 ]; then
            echo "   → Optimize cache key specificity"
            echo "   → Review cache invalidation patterns"
            RECOMMENDATIONS="${RECOMMENDATIONS}optimize-keys,"
          else
            echo "   → Fine-tune cache restore-keys"
            RECOMMENDATIONS="${RECOMMENDATIONS}tune-restore-keys,"
          fi
        else
          echo "✅ Cache hit rate (${HIT_RATE}%) meets target (${{ inputs.optimization-threshold }}%)"
        fi
        
        if [ $PERFORMANCE_IMPROVEMENT -lt 30 ]; then
          echo "⚠️ Performance improvement (${PERFORMANCE_IMPROVEMENT}%) could be higher"
          echo "   → Consider additional caching layers"
          echo "   → Implement cross-job cache sharing"
          RECOMMENDATIONS="${RECOMMENDATIONS}add-cache-layers,"
        else
          echo "✅ Performance improvement (${PERFORMANCE_IMPROVEMENT}%) is excellent"
        fi
        
        if [ -f "cache-analytics/system-data.json" ]; then
          CACHE_SIZE=$(grep -o '"total_cache_size_mb": [0-9]*' cache-analytics/system-data.json | grep -o '[0-9]*' || echo "0")
          if [ $CACHE_SIZE -gt 1000 ]; then
            echo "⚠️ Cache size (${CACHE_SIZE}MB) is large"
            echo "   → Consider cache cleanup strategies"
            echo "   → Review cache retention policies"
            RECOMMENDATIONS="${RECOMMENDATIONS}optimize-size,"
          fi
        fi
        
        if [ -z "$RECOMMENDATIONS" ]; then
          RECOMMENDATIONS="optimal"
          echo "🎉 Cache performance is optimal - no recommendations needed"
        fi
        
        # Remove trailing comma
        RECOMMENDATIONS=$(echo "$RECOMMENDATIONS" | sed 's/,$//')
        
        echo ""
        echo "📋 Summary Recommendations: ${RECOMMENDATIONS}"
        
        # Store analytics results
        cat > cache-analytics/performance-analysis.json << EOF
        {
          "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "hit_rate": $HIT_RATE,
          "performance_improvement": $PERFORMANCE_IMPROVEMENT,
          "optimization_score": $OPTIMIZATION_SCORE,
          "trend": "$TREND",
          "recommendations": "$RECOMMENDATIONS",
          "threshold": ${{ inputs.optimization-threshold }},
          "analysis_version": "1.0"
        }
        EOF
        
        # Set outputs
        echo "hit-rate=${HIT_RATE}" >> $GITHUB_OUTPUT
        echo "optimization-score=${OPTIMIZATION_SCORE}" >> $GITHUB_OUTPUT
        echo "recommendations=${RECOMMENDATIONS}" >> $GITHUB_OUTPUT
        echo "trend=${TREND}" >> $GITHUB_OUTPUT
        
        echo "✅ Cache performance analytics completed"
      shell: bash
    
    - name: Generate cache performance report
      if: inputs.monitoring-mode == 'report'
      id: generate-report
      run: |
        echo "📊 CACHE PERFORMANCE REPORT"
        echo "=========================="
        echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run: ${{ github.run_number }}"
        echo ""
        
        # Load analytics data
        if [ -f "cache-analytics/performance-analysis.json" ]; then
          HIT_RATE=$(grep -o '"hit_rate": [0-9]*' cache-analytics/performance-analysis.json | grep -o '[0-9]*' || echo "0")
          OPTIMIZATION_SCORE=$(grep -o '"optimization_score": [0-9]*' cache-analytics/performance-analysis.json | grep -o '[0-9]*' || echo "0")
          TREND=$(grep -o '"trend": "[^"]*"' cache-analytics/performance-analysis.json | sed 's/"trend": "//; s/"//' || echo "unknown")
          RECOMMENDATIONS=$(grep -o '"recommendations": "[^"]*"' cache-analytics/performance-analysis.json | sed 's/"recommendations": "//; s/"//' || echo "none")
        else
          HIT_RATE=0
          OPTIMIZATION_SCORE=0
          TREND="unknown"
          RECOMMENDATIONS="no-data"
        fi
        
        echo "🎯 Performance Metrics:"
        echo "======================"
        echo "- Cache Hit Rate: ${HIT_RATE}%"
        echo "- Optimization Score: ${OPTIMIZATION_SCORE}/100"
        echo "- Performance Trend: ${TREND}"
        echo ""
        
        # Performance status assessment
        echo "📈 Performance Assessment:"
        echo "========================="
        
        if [ $OPTIMIZATION_SCORE -ge 90 ]; then
          echo "🏆 EXCELLENT: Cache performance is outstanding"
          echo "   → Hit rate exceeds targets"
          echo "   → Performance improvements are significant"
          echo "   → Continue current optimization strategies"
        elif [ $OPTIMIZATION_SCORE -ge 70 ]; then
          echo "✅ GOOD: Cache performance is solid"
          echo "   → Most targets are being met"
          echo "   → Minor optimizations may provide additional benefits"
          echo "   → Monitor for performance regressions"
        elif [ $OPTIMIZATION_SCORE -ge 50 ]; then
          echo "⚠️ FAIR: Cache performance needs improvement"
          echo "   → Some targets are not being met"
          echo "   → Optimization recommendations should be implemented"
          echo "   → Review cache strategies and configurations"
        else
          echo "❌ POOR: Cache performance requires immediate attention"
          echo "   → Most targets are not being met"
          echo "   → Implement all optimization recommendations"
          echo "   → Consider cache strategy redesign"
        fi
        
        echo ""
        echo "🔧 Optimization Recommendations:"
        echo "==============================="
        
        case "$RECOMMENDATIONS" in
          "optimal")
            echo "🎉 No optimizations needed - performance is optimal"
            ;;
          "no-data")
            echo "📊 Insufficient data for recommendations"
            echo "   → Enable cache performance monitoring"
            echo "   → Run additional workflows to collect data"
            ;;
          *)
            echo "📋 Active Recommendations:"
            
            if [[ "$RECOMMENDATIONS" == *"improve-hit-rate"* ]]; then
              echo "   → Improve cache hit rate strategies"
            fi
            
            if [[ "$RECOMMENDATIONS" == *"review-cache-keys"* ]]; then
              echo "   → Review and optimize cache key patterns"
            fi
            
            if [[ "$RECOMMENDATIONS" == *"optimize-keys"* ]]; then
              echo "   → Optimize cache key specificity"
            fi
            
            if [[ "$RECOMMENDATIONS" == *"tune-restore-keys"* ]]; then
              echo "   → Fine-tune cache restore-keys patterns"
            fi
            
            if [[ "$RECOMMENDATIONS" == *"add-cache-layers"* ]]; then
              echo "   → Add additional caching layers"
            fi
            
            if [[ "$RECOMMENDATIONS" == *"optimize-size"* ]]; then
              echo "   → Optimize cache size and retention"
            fi
            ;;
        esac
        
        echo ""
        echo "📊 Performance Targets:"
        echo "======================"
        echo "- Target Hit Rate: ${{ inputs.optimization-threshold }}%+ (Current: ${HIT_RATE}%)"
        echo "- Target Optimization Score: 90+ (Current: ${OPTIMIZATION_SCORE})"
        echo "- Target Performance Improvement: 50%+"
        echo ""
        
        # Generate badge data for cache performance
        mkdir -p badge-data
        
        if [ $HIT_RATE -ge ${{ inputs.optimization-threshold }} ]; then
          BADGE_COLOR="brightgreen"
          BADGE_MESSAGE="${HIT_RATE}%"
        elif [ $HIT_RATE -ge 70 ]; then
          BADGE_COLOR="yellow"
          BADGE_MESSAGE="${HIT_RATE}%"
        else
          BADGE_COLOR="red"
          BADGE_MESSAGE="${HIT_RATE}%"
        fi
        
        cat > badge-data/cache-performance-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "cache hit rate",
          "message": "$BADGE_MESSAGE",
          "color": "$BADGE_COLOR"
        }
        EOF
        
        echo "✅ Cache performance report generated"
        echo "🏷️ Performance badge created: ${BADGE_MESSAGE} (${BADGE_COLOR})"
      shell: bash
    
    - name: Implement intelligent cache optimization
      if: inputs.monitoring-mode == 'optimize'
      id: optimize-cache
      run: |
        echo "🚀 INTELLIGENT CACHE OPTIMIZATION"
        echo "================================="
        
        # Load current performance data
        if [ -f "cache-analytics/performance-analysis.json" ]; then
          RECOMMENDATIONS=$(grep -o '"recommendations": "[^"]*"' cache-analytics/performance-analysis.json | sed 's/"recommendations": "//; s/"//' || echo "none")
          HIT_RATE=$(grep -o '"hit_rate": [0-9]*' cache-analytics/performance-analysis.json | grep -o '[0-9]*' || echo "0")
        else
          RECOMMENDATIONS="no-data"
          HIT_RATE=0
        fi
        
        echo "📊 Current Performance: ${HIT_RATE}%"
        echo "🎯 Recommendations: ${RECOMMENDATIONS}"
        echo ""
        
        # Apply intelligent optimizations based on recommendations
        echo "🔧 Applying Intelligent Optimizations:"
        echo "====================================="
        
        case "$RECOMMENDATIONS" in
          "optimal")
            echo "✅ Performance is optimal - maintaining current configuration"
            ;;
          "no-data")
            echo "📊 Enabling enhanced monitoring for future optimization"
            echo "ENABLE_ENHANCED_MONITORING=true" >> $GITHUB_ENV
            ;;
          *)
            echo "🔄 Implementing optimization strategies..."
            
            # Create optimization configuration
            cat > .workflow-cache/optimization-config.json << EOF
            {
              "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
              "current_hit_rate": $HIT_RATE,
              "target_hit_rate": ${{ inputs.optimization-threshold }},
              "recommendations": "$RECOMMENDATIONS",
              "optimizations_applied": []
            }
            EOF
            
            # Apply specific optimizations
            if [[ "$RECOMMENDATIONS" == *"improve-hit-rate"* ]]; then
              echo "   → Implementing broader cache key patterns"
              echo "CACHE_KEY_STRATEGY=broad" >> $GITHUB_ENV
            fi
            
            if [[ "$RECOMMENDATIONS" == *"optimize-keys"* ]]; then
              echo "   → Optimizing cache key specificity"
              echo "CACHE_KEY_STRATEGY=optimized" >> $GITHUB_ENV
            fi
            
            if [[ "$RECOMMENDATIONS" == *"add-cache-layers"* ]]; then
              echo "   → Enabling additional cache layers"
              echo "ENABLE_MULTI_LAYER_CACHE=true" >> $GITHUB_ENV
            fi
            
            if [[ "$RECOMMENDATIONS" == *"optimize-size"* ]]; then
              echo "   → Implementing cache size optimization"
              echo "CACHE_SIZE_OPTIMIZATION=true" >> $GITHUB_ENV
            fi
            ;;
        esac
        
        echo ""
        echo "✅ Intelligent cache optimization completed"
        echo "📈 Optimizations will take effect in subsequent workflow runs"
      shell: bash
    
    - name: Upload cache performance data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cache-performance-data-${{ github.run_number }}
        path: |
          cache-analytics/
          .cache-shared/performance-metrics.json
          badge-data/cache-performance-badge.json
        retention-days: 30