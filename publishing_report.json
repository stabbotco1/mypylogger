{
  "publishing_status": "failed",
  "dry_run": true,
  "package_dir": ".",
  "build_dir": null,
  "error_report": {
    "status": "error",
    "total_errors": 1,
    "error_categories": {
      "unknown": 1
    },
    "severity_counts": {
      "medium": 1
    },
    "retryable_errors": 1,
    "most_severe": "medium",
    "errors": [
      {
        "category": "unknown",
        "severity": "medium",
        "message": "Command failed: scripts/run_tests.sh",
        "details": "Exit code: 1",
        "command": "scripts/run_tests.sh",
        "exit_code": 1,
        "stdout": "\ud83e\uddea mypylogger v0.2.0 - Master Test Runner\n====================================\n\n1. Code Formatting Check\n------------------------\n\u001b[0;34mRunning: Code formatting compliance\u001b[0m\n\u001b[0;31m\u2717 Code formatting compliance\u001b[0m\n\u001b[1;33mError output:\u001b[0m\nWould reformat: tests/unit/test_publishing_notifications.py\n1 file would be reformatted, 43 files already formatted\n\n\n2. Linting Check\n----------------\n\u001b[0;34mRunning: Linting compliance\u001b[0m\n\u001b[0;31m\u2717 Linting compliance\u001b[0m\n\u001b[1;33mError output:\u001b[0m\nS105 Possible hardcoded password assigned to: \"github_token\"\n  --> tests/unit/test_publishing_notifications.py:30:41\n   |\n28 |         notifier = PublishingFailureNotifier(\"test-token\")\n29 |\n30 |         assert notifier.github_token == \"test-token\"\n   |                                         ^^^^^^^^^^^^\n31 |\n32 |     @patch.dict(\"os.environ\", {\"GITHUB_TOKEN\": \"env-token\", \"GITHUB_REPOSITORY\": \"user/repo\"})\n   |\n\nS105 Possible hardcoded password assigned to: \"github_token\"\n  --> tests/unit/test_publishing_notifications.py:37:41\n   |\n35 |         notifier = PublishingFailureNotifier()\n36 |\n37 |         assert notifier.github_token == \"env-token\"\n   |                                         ^^^^^^^^^^^\n38 |         assert notifier.repository == \"user/repo\"\n   |\n\nI001 [*] Import block is un-sorted or un-formatted\n  --> tests/unit/test_pypi_publisher.py:14:1\n   |\n12 |   sys.path.insert(0, str(Path(__file__).parent.parent.parent / \"scripts\"))\n13 |\n14 | / from publish_with_error_handling import PyPIPublisher\n15 | | from publishing_error_handler import ErrorCategory, PublishingError, ErrorSeverity\n   | |__________________________________________________________________________________^\n   |\nhelp: Organize imports\n\nFound 3 errors.\n[*] 1 fixable with the `--fix` option.\n\n\n3. Type Checking\n----------------\n\u001b[0;34mRunning: Type checking compliance\u001b[0m\n\u001b[0;32m\u2713 Type checking compliance\u001b[0m\n\n4. Test Execution with Coverage\n-------------------------------\n\u001b[0;34mRunning: Test execution and coverage (95% minimum)\u001b[0m\n\u001b[0;32m\u2713 Test execution and coverage (95% minimum)\u001b[0m\n\n5. Security Scanning\n--------------------\n\u001b[0;34mRunning: Security scanning (bandit, safety, semgrep, codeql simulation)\u001b[0m\n\u001b[0;32m\u2713 Security scanning (bandit, safety, semgrep, codeql simulation)\u001b[0m\n\n6. Import Verification\n----------------------\n\u001b[0;34mRunning: Package import verification\u001b[0m\n\u001b[0;32m\u2713 Package import verification\u001b[0m\n\n7. Dependency Usage Check\n-------------------------\n\u001b[0;34mRunning: Unused dependency detection\u001b[0m\n\u001b[0;31m\u2717 Unused dependency detection\u001b[0m\n\u001b[1;33mError output:\u001b[0m\nAssuming the corresponding module name of package 'tomli' is 'tomli'. Install the package or configure a package_module_name_map entry to override this behaviour.\nScanning 37 files...\n\n\u001b[1mscripts/notify_publishing_failure.py\u001b[m\u001b[36m:\u001b[m166\u001b[36m:\u001b[m20\u001b[36m:\u001b[m \u001b[1m\u001b[31mDEP004\u001b[m 'requests' imported but declared as a dev dependency\n\u001b[1mscripts/publish_with_error_handling.py\u001b[m\u001b[36m:\u001b[m18\u001b[36m:\u001b[m1\u001b[36m:\u001b[m \u001b[1m\u001b[31mDEP001\u001b[m 'publishing_error_handler' imported but missing from the dependency definitions\n\u001b[1m\u001b[31mFound 2 dependency issues.\u001b[m\n\nFor more information, see the documentation: https://deptry.com/\n\n\nSummary\n=======\n\u001b[0;31m\u274c QUALITY GATES FAILED!\u001b[0m\n\u001b[0;31mOne or more checks failed. Please fix the issues above.\u001b[0m\n\n\u001b[1;33m\ud83d\udca1 Common fixes:\u001b[0m\n\u001b[1;33m  - Run 'uv run ruff format .' to fix formatting\u001b[0m\n\u001b[1;33m  - Run 'uv run ruff check --fix .' to auto-fix linting issues\u001b[0m\n\u001b[1;33m  - Add type hints for mypy compliance\u001b[0m\n\u001b[1;33m  - Add tests to reach 95% coverage\u001b[0m\n\u001b[1;33m  - Review security scan results and fix issues\u001b[0m\n\u001b[1;33m  - Remove unused dependencies with 'uv remove <package>'\u001b[0m\n\u001b[1;33m  - Add missing dependencies with 'uv add <package>'\u001b[0m\n",
        "stderr": "",
        "timestamp": 1761427471.208707,
        "retry_count": 0,
        "max_retries": 3,
        "is_retryable": true
      }
    ],
    "summary": "Publishing failed with 1 error(s)"
  }
}